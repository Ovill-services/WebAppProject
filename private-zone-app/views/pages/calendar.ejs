<div class="main-content">
    <div class="mt-5 container">
        <!-- Enhanced page header -->
        <div class="enhanced-page-header">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <div class="page-header-icon">
                            <i class="bi bi-calendar-event"></i>
                        </div>
                    </div>
                    <div>
                        <h1 class="mb-1" data-translate="calendar.title">Calendar</h1>
                        <p class="text-muted mb-0">Manage your schedule efficiently</p>
                    </div>
                </div>
                <div class="text-end">
                    <div class="enhanced-time-card card border-0">
                        <div class="card-body py-2 px-3">
                            <small class="text-muted d-block">Current Time</small>
                            <strong class="text-body">
                                <i class="bi bi-clock me-1"></i>
                                <span id="currentTime"></span>
                            </strong>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Alert container for notifications -->
        <div id="alertContainer"></div>
        
        <!-- Enhanced Calendar Navigation -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="calendar-card">
                    <div class="calendar-header d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <h5 class="mb-0 d-flex align-items-center text-white me-3">
                                <i class="bi bi-calendar me-2"></i>
                                <span id="currentMonth">January 2025</span>
                            </h5>
                            <!-- View Mode Selector -->
                            <div class="btn-group me-3" role="group" aria-label="View Mode">
                                <button type="button" class="btn btn-outline-light btn-sm active" id="monthViewBtn" title="Month View">
                                    <i class="bi bi-calendar3 me-1"></i>Month
                                </button>
                                <button type="button" class="btn btn-outline-light btn-sm" id="weekViewBtn" title="Week View">
                                    <i class="bi bi-calendar-week me-1"></i>Week
                                </button>
                                <button type="button" class="btn btn-outline-light btn-sm" id="dayViewBtn" title="Day View">
                                    <i class="bi bi-calendar-day me-1"></i>Day
                                </button>
                                <button type="button" class="btn btn-outline-light btn-sm" id="agendaViewBtn" title="Agenda View">
                                    <i class="bi bi-list-ul me-1"></i>Agenda
                                </button>
                            </div>
                        </div>
                        <div class="btn-group" role="group">
                            <button type="button" class="calendar-nav-btn" id="prevPeriod" title="Previous">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                            <button type="button" class="calendar-today-btn calendar-nav-btn" id="todayBtn" data-translate="calendar.today">Today</button>
                            <button type="button" class="calendar-nav-btn" id="nextPeriod" title="Next">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                            <button type="button" class="calendar-nav-btn" id="colorSettingsBtn" data-bs-toggle="modal" data-bs-target="#colorSettingsModal" title="Color Settings">
                                <i class="bi bi-palette"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <!-- Enhanced Calendar Grid -->
                        <div class="table-responsive" id="monthWeekView">
                            <table class="table mb-0" id="calendarTable">
                                <thead>
                                    <tr>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.sunday">SUN</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.monday">MON</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.tuesday">TUE</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.wednesday">WED</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.thursday">THU</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.friday">FRI</th>
                                        <th class="text-center py-3 fw-bold text-muted border-0" data-translate="calendar.dayNames.saturday">SAT</th>
                                    </tr>
                                </thead>
                                <tbody id="calendarBody">
                                    <!-- Calendar days will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Day View -->
                        <div class="day-view-container" id="dayView" style="display: none;">
                            <div class="day-view-header d-flex align-items-center justify-content-between mb-3">
                                <div class="d-flex align-items-center">
                                    <button type="button" class="btn btn-outline-secondary btn-sm me-2" id="prevDay" title="Previous Day">
                                        <i class="bi bi-chevron-left"></i>
                                    </button>
                                    <h4 class="mb-0 me-2" id="dayViewTitle">Today - January 15, 2025</h4>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" id="nextDay" title="Next Day">
                                        <i class="bi bi-chevron-right"></i>
                                    </button>
                                </div>
                                <button type="button" class="btn btn-primary btn-sm" onclick="window.createEvent();">
                                    <i class="bi bi-plus me-1"></i>Add Event
                                </button>
                            </div>
                            
                            <div class="day-view-content">
                                <div class="time-slots" id="timeSlots">
                                    <!-- Time slots will be generated by JavaScript -->
                                </div>
                            </div>
                        </div>
                        
                        <!-- Agenda View -->
                        <div class="agenda-view-container" id="agendaView" style="display: none;">
                            <div class="agenda-view-header d-flex align-items-center justify-content-between mb-3">
                                <h4 class="mb-0">Upcoming Events</h4>
                                <div class="agenda-controls">
                                    <select class="form-select form-select-sm" id="agendaPeriod">
                                        <option value="week">This Week</option>
                                        <option value="month">This Month</option>
                                        <option value="quarter">Next 3 Months</option>
                                    </select>
                                </div>
                            </div>
                            
                            <div class="agenda-content" id="agendaContent">
                                <!-- Agenda items will be generated by JavaScript -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Quick Actions and Events Row -->
        <div class="row">
            <!-- Enhanced Quick Actions -->
            <div class="col-lg-4 mb-4">
                <div class="quick-actions-card h-100">
                    <div class="quick-actions-header card-header text-white py-3 px-3">
                        <h6 class="mb-0 d-flex align-items-center position-relative">
                            <i class="bi bi-lightning-charge me-2"></i><span data-translate="calendar.quickActions">Quick Actions</span>
                        </h6>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-3">
                            <button class="enhanced-action-btn btn btn-primary btn-lg d-flex align-items-center justify-content-center mt-3" 
                                    id="addEventBtn" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#addEventModal">
                                <i class="bi bi-calendar-plus me-2"></i>
                                <span data-translate="calendar.addEvent">Add Event</span>
                            </button>
                            <button class="enhanced-action-btn btn btn-outline-primary btn-lg d-flex align-items-center justify-content-center" id="scheduleMeetingBtn">
                                <i class="bi bi-people me-2"></i>
                                <span data-translate="calendar.scheduleMeeting">Schedule Meeting</span>
                            </button>
                            <button class="enhanced-action-btn btn btn-outline-info btn-lg d-flex align-items-center justify-content-center" id="syncCalendarBtn" onclick="location.reload()">
                                <i class="bi bi-arrow-clockwise me-2"></i>
                                <span data-translate="calendar.syncCalendar">Sync Calendar</span>
                            </button>
                        </div>
                        
                        <!-- Enhanced Mini Stats -->
                        <hr class="my-4">
                        <div class="row text-center">
                            <div class="col-6">
                                <div class="enhanced-stats-card">
                                    <div class="stats-number text-primary">0</div>
                                    <div class="stats-label" data-translate="calendar.events">Events</div>
                                    <small class="text-muted" data-translate="calendar.thisMonth">This Month</small>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="enhanced-stats-card">
                                    <div class="stats-number text-success">0</div>
                                    <div class="stats-label" data-translate="calendar.tasks">Tasks</div>
                                    <small class="text-muted" data-translate="calendar.today">Today</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Enhanced Upcoming Events -->
            <div class="col-lg-8 mb-4">
                <div class="enhanced-events-card h-100">
                    <div class="enhanced-events-header card-header text-white py-3 d-flex justify-content-between align-items-center px-3">
                        <h6 class="mb-0 d-flex align-items-center position-relative">
                            <i class="bi bi-calendar-check me-2"></i><span data-translate="calendar.upcomingEvents">Upcoming Events</span>
                        </h6>
                        <span class="badge bg-light text-dark"><span id="eventsCount">0</span> <span data-translate="calendar.events">events</span></span>
                    </div>
                    <div class="card-body" id="upcomingEventsContainer">
                        <div class="text-center py-5" id="noEventsMessage">
                            <div class="mb-4">
                                <i class="bi bi-calendar-x display-1 text-muted opacity-50"></i>
                            </div>
                            <h5 class="text-muted mb-2" data-translate="calendar.noEventsMessage">No upcoming events</h5>
                            <p class="text-muted mb-4" data-translate="calendar.noEventsDescription">Your scheduled events will appear here</p>
                            <button class="enhanced-action-btn btn btn-outline-primary" id="createFirstEventBtn">
                                <i class="bi bi-plus-circle me-2"></i><span data-translate="calendar.createFirstEvent">Create your first event</span>
                            </button>
                        </div>
                        
                        <div id="eventsList" style="display: none;">
                            <!-- Events will be populated here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Enhanced Calendar Integration -->
        <div class="row">
            <div class="col-12">
                <div class="enhanced-integration-card">
                    <div class="enhanced-integration-header card-header text-white py-3 px-3">
                        <h6 class="mb-0 d-flex align-items-center position-relative">
                            <i class="bi bi-puzzle me-2"></i><span data-translate="calendar.calendarIntegration">Calendar Integration</span>
                        </h6>
                    </div>
                    <div class="card-body text-center py-5">
                        <div class="mb-4">
                            <i class="bi bi-calendar-check integration-status-icon"></i>
                        </div>
                        <h5 class="mb-3" data-translate="calendar.googleCalendarIntegration">Google Calendar Integration</h5>
                        <p class="text-muted mb-4 col-md-8 mx-auto" data-translate="calendar.googleCalendarDescription">
                            Your Google Calendar is automatically synced when you log in with Google! All your events are imported and managed in one place.
                        </p>
                        
                        <div class="row justify-content-center">
                            <div class="col-md-8">
                                <div class="alert alert-info d-flex align-items-center" role="alert">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <div id="calendarStatusMessage" data-translate="calendar.checkingConnection">
                                        Checking calendar connection...
                                    </div>
                                </div>
                                
                                <div class="d-flex flex-wrap justify-content-center gap-3" id="calendarActions">
                                    <button class="enhanced-action-btn btn btn-success btn-lg" id="refreshCalendarBtn">
                                        <i class="bi bi-arrow-clockwise me-2"></i>
                                        <span data-translate="calendar.refreshCalendar">Refresh Calendar</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mt-4">
                            <small class="text-muted" data-translate="calendar.secureIntegrations">
                                <i class="bi bi-shield-check me-1"></i>
                                All integrations are secure and encrypted
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Event Modal -->
<div class="modal fade" id="addEventModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content enhanced-modal">
            <div class="enhanced-modal-header">
                <h5 class="modal-title text-white position-relative">
                    <i class="bi bi-calendar-plus me-2"></i><span data-translate="calendar.addNewEvent">Add New Event</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="enhanced-modal-body">
                <form id="createEventForm" autocomplete="off" onsubmit="return false;">
<script>
// Prevent default form submission for createEventForm and block no-title events
document.addEventListener('DOMContentLoaded', function() {
    const createEventForm = document.getElementById('createEventForm');
    if (createEventForm) {
        createEventForm.addEventListener('submit', function(e) {
            console.log('[DEBUG] createEventForm submit handler triggered');
            e.preventDefault();
            const titleInput = document.getElementById('title');
            if (!titleInput.value.trim()) {
                titleInput.classList.add('is-invalid');
                titleInput.focus();
                return false;
            } else {
                titleInput.classList.remove('is-invalid');
            }
            // Only process event creation when the user clicks the modal's primary button
            // (the button's click handler should handle the actual event creation logic)
            return false;
        });
    }
});
</script>
                    <div class="row">
                        <div class="col-md-12 mb-4">
                            <label for="title" class="form-label" data-translate="calendar.eventTitle">Event Title</label>
                            <span class="text-danger">*</span>
                            <input type="text" class="enhanced-form-control" id="title" name="title" required placeholder="Enter event title">
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-12">
                            <label for="dateRange" class="form-label" data-translate="calendar.eventDates">Event Dates</label>
                            <span class="text-danger">*</span>
                            <div class="simple-datepicker-container">
                                <input type="text" class="enhanced-form-control simple-datepicker" id="dateRange" name="dateRange" required readonly placeholder="Click to select start and end dates">
                                <i class="bi bi-calendar3 datepicker-icon"></i>
                            </div>
                            <small class="text-muted">Click to select start date, then end date</small>
                            <!-- Hidden inputs for form submission -->
                            <input type="hidden" id="startDate" name="startDate">
                            <input type="hidden" id="endDate" name="endDate">
                        </div>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input pr-2" type="checkbox" id="allDay" name="allDay">
                                <label class="form-check-label" for="allDay" data-translate="calendar.allDayEvent">
                                    All Day Event
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-4" id="timeFields">
                        <div class="col-md-6">
                            <label for="startTime" class="form-label" data-translate="calendar.startTime">Start Time</label>
                            <div class="time-input-container">
                                <div class="time-input-display" id="startTimeDisplay" data-target="startTime">
                                    Select time...
                                </div>
                                <button type="button" class="time-input-btn" onclick="openTimePicker('startTime')">
                                    <i class="bi bi-clock"></i>
                                </button>
                                <input type="hidden" id="startTime" name="startTime" value="">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="endTime" class="form-label" data-translate="calendar.endTime">End Time</label>
                            <div class="time-input-container">
                                <div class="time-input-display" id="endTimeDisplay" data-target="endTime">
                                    Select time...
                                </div>
                                <button type="button" class="time-input-btn" onclick="openTimePicker('endTime')">
                                    <i class="bi bi-clock"></i>
                                </button>
                                <input type="hidden" id="endTime" name="endTime" value="">
                            </div>
                            <small class="text-muted duration-helper">Duration will be calculated automatically</small>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label for="category" class="form-label" data-translate="calendar.category">Event Category</label>
                        <select class="enhanced-form-control" id="category" name="category">
                            <option value="work" data-translate="calendar.categoryWork">Work</option>
                            <option value="meeting" data-translate="calendar.categoryMeeting">Meeting</option>
                            <option value="personal" data-translate="calendar.categoryPersonal">Personal</option>
                            <option value="reminder" data-translate="calendar.categoryReminder">Reminder</option>
                        </select>
                        <small class="form-text text-muted">Choose a category to organize your events with custom colors</small>
                    </div>
                    
                    <div class="mb-4">
                        <label for="location" class="form-label" data-translate="calendar.location">Location</label>
                        <input type="text" class="enhanced-form-control" id="location" name="location" data-translate="calendar.locationPlaceholder" placeholder="Meeting room, address, or virtual link">
                    </div>
                    
                    <div class="mb-3">
                        <label for="description" class="form-label" data-translate="calendar.description">Description</label>
                        <textarea class="enhanced-form-control" id="description" name="description" rows="3" placeholder="Add event details..."></textarea>
                    </div>
                    
                    <!-- Enhanced Fields -->
                    <div class="mb-4">
                        <label for="attendees" class="form-label">
                            <i class="bi bi-people me-1"></i>Attendees
                        </label>
                        <input type="text" class="enhanced-form-control" id="attendees" name="attendees" 
                               placeholder="Enter email addresses separated by commas">
                        <small class="form-text text-muted">Add attendee email addresses (comma-separated)</small>
                    </div>
                    
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <label for="reminder" class="form-label">
                                <i class="bi bi-bell me-1"></i>Reminder
                            </label>
                            <select class="enhanced-form-control" id="reminder" name="reminder">
                                <option value="">No reminder</option>
                                <option value="5">5 minutes before</option>
                                <option value="15">15 minutes before</option>
                                <option value="30">30 minutes before</option>
                                <option value="60">1 hour before</option>
                                <option value="1440">1 day before</option>
                                <option value="10080">1 week before</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="priority" class="form-label">
                                <i class="bi bi-flag me-1"></i>Priority
                            </label>
                            <select class="enhanced-form-control" id="priority" name="priority">
                                <option value="normal">Normal</option>
                                <option value="high">High</option>
                                <option value="urgent">Urgent</option>
                                <option value="low">Low</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="recurring" name="recurring">
                            <label class="form-check-label" for="recurring">
                                <i class="bi bi-arrow-repeat me-1"></i>Recurring Event
                            </label>
                        </div>
                    </div>
                    
                    <div class="row mb-3" id="recurringOptions" style="display: none;">
                        <div class="col-md-6">
                            <label for="recurringType" class="form-label">Repeat Type</label>
                            <select class="enhanced-form-control" id="recurringType" name="recurringType">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="recurringEnd" class="form-label">End Date</label>
                            <input type="date" class="enhanced-form-control" id="recurringEnd" name="recurringEnd">
                            <small class="form-text text-muted">Leave empty for no end date</small>
                        </div>
                    </div>
                </form>
            </div>
            <div class="enhanced-modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-translate="calendar.cancel">Cancel</button>
                <button type="button" class="btn btn-primary enhanced-action-btn" onclick="window.createEvent();">
                    <i class="bi bi-check-circle me-2"></i><span data-translate="calendar.createEvent">Create Event</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- View Event Modal -->
<div class="modal fade" id="viewEventModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-dark text-white">
                <h5 class="modal-title">
                    <i class="bi bi-calendar-event me-2"></i><span data-translate="calendar.eventDetails">Event Details</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="eventDetailsContent">
                <!-- Event details will be populated here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-translate="calendar.close">Close</button>
                <button type="button" class="btn btn-warning" onclick="window.editEventFromView();">
                    <i class="bi bi-pencil me-1"></i><span data-translate="calendar.editEvent">Edit Event</span>
                </button>
                <button type="button" class="btn btn-danger" onclick="window.deleteEventFromView();">
                    <i class="bi bi-trash me-1"></i><span data-translate="calendar.deleteEvent">Delete Event</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Event Modal -->
<div class="modal fade" id="editEventModal" tabindex="-1" aria-labelledby="editEventModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title" id="editEventModalLabel">
                    <i class="bi bi-pencil-square me-2"></i><span data-translate="calendar.editEvent">Edit Event</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editEventForm">
                    <input type="hidden" id="editEventId" name="eventId">
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label for="editTitle" class="form-label" data-translate="calendar.eventTitle">Event Title</label> <span class="text-danger">*</span>
                            <input type="text" class="form-control" id="editTitle" name="title" required 
                                   placeholder="Enter event title">
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label for="editDateRange" class="form-label" data-translate="calendar.eventDates">Event Dates</label> <span class="text-danger">*</span>
                            <div class="simple-datepicker-container">
                                <input type="text" class="form-control simple-datepicker" id="editDateRange" name="dateRange" required readonly placeholder="Click to select start and end dates">
                                <i class="bi bi-calendar3 datepicker-icon"></i>
                            </div>
                            <small class="text-muted">Click to select start date, then end date</small>
                            <!-- Hidden inputs for form submission -->
                            <input type="hidden" id="editStartDate" name="startDate">
                            <input type="hidden" id="editEndDate" name="endDate">
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="editAllDay" name="allDay">
                                <label class="form-check-label" for="editAllDay" data-translate="calendar.allDayEvent">
                                    All Day Event
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-3" id="editTimeFields">
                        <div class="col-md-6">
                            <label for="editStartTime" class="form-label" data-translate="calendar.startTime">Start Time</label>
                            <div class="time-input-container">
                                <div class="time-input-display" id="editStartTimeDisplay" data-target="editStartTime">
                                    Select time...
                                </div>
                                <button type="button" class="time-input-btn" onclick="openTimePicker('editStartTime')">
                                    <i class="bi bi-clock"></i>
                                </button>
                                <input type="hidden" id="editStartTime" name="startTime" value="">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <label for="editEndTime" class="form-label" data-translate="calendar.endTime">End Time</label>
                            <div class="time-input-container">
                                <div class="time-input-display" id="editEndTimeDisplay" data-target="editEndTime">
                                    Select time...
                                </div>
                                <button type="button" class="time-input-btn" onclick="openTimePicker('editEndTime')">
                                    <i class="bi bi-clock"></i>
                                </button>
                                <input type="hidden" id="editEndTime" name="endTime" value="">
                            </div>
                            <small class="text-muted duration-helper">Duration will be calculated automatically</small>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label for="editCategory" class="form-label" data-translate="calendar.category">Event Category</label>
                            <select class="form-control" id="editCategory" name="category">
                                <option value="work" data-translate="calendar.categoryWork">Work</option>
                                <option value="meeting" data-translate="calendar.categoryMeeting">Meeting</option>
                                <option value="personal" data-translate="calendar.categoryPersonal">Personal</option>
                                <option value="reminder" data-translate="calendar.categoryReminder">Reminder</option>
                            </select>
                            <small class="form-text text-muted">Choose a category to organize your events with custom colors</small>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label for="editLocation" class="form-label" data-translate="calendar.location">Location</label>
                            <input type="text" class="form-control" id="editLocation" name="location" 
                                   placeholder="Enter event location">
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <label for="editDescription" class="form-label" data-translate="calendar.description">Description</label>
                            <textarea class="form-control" id="editDescription" name="description" 
                                      rows="3" placeholder="Enter event description"></textarea>
                        </div>
                    </div>
                    
                    <!-- Enhanced Fields -->
                    <div class="row mb-3">
                        <div class="col-12">
                            <label for="editAttendees" class="form-label">
                                <i class="bi bi-people me-1"></i>Attendees
                            </label>
                            <input type="text" class="form-control" id="editAttendees" name="attendees" 
                                   placeholder="Enter email addresses separated by commas">
                            <small class="form-text text-muted">Add attendee email addresses (comma-separated)</small>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="editReminder" class="form-label">
                                <i class="bi bi-bell me-1"></i>Reminder
                            </label>
                            <select class="form-control" id="editReminder" name="reminder">
                                <option value="">No reminder</option>
                                <option value="5">5 minutes before</option>
                                <option value="15">15 minutes before</option>
                                <option value="30">30 minutes before</option>
                                <option value="60">1 hour before</option>
                                <option value="1440">1 day before</option>
                                <option value="10080">1 week before</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="editPriority" class="form-label">
                                <i class="bi bi-flag me-1"></i>Priority
                            </label>
                            <select class="form-control" id="editPriority" name="priority">
                                <option value="normal">Normal</option>
                                <option value="high">High</option>
                                <option value="urgent">Urgent</option>
                                <option value="low">Low</option>
                            </select>
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-12">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="editRecurring" name="recurring">
                                <label class="form-check-label" for="editRecurring">
                                    <i class="bi bi-arrow-repeat me-1"></i>Recurring Event
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row mb-3" id="editRecurringOptions" style="display: none;">
                        <div class="col-md-6">
                            <label for="editRecurringType" class="form-label">Repeat Type</label>
                            <select class="form-control" id="editRecurringType" name="recurringType">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="monthly">Monthly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="editRecurringEnd" class="form-label">End Date</label>
                            <input type="date" class="form-control" id="editRecurringEnd" name="recurringEnd">
                            <small class="form-text text-muted">Leave empty for no end date</small>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-translate="calendar.cancel">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="window.updateEvent();">
                    <i class="bi bi-check-lg me-1"></i><span data-translate="calendar.updateEvent">Update Event</span>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Day Details Modal -->
<div class="modal fade" id="dayDetailsModal" tabindex="-1" aria-labelledby="dayDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-body text-body">
                <h5 class="modal-title" id="dayDetailsModalLabel">
                    <i class="bi bi-calendar me-2"></i><span id="dayDetailsTitle">Day Events</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0 text-muted">Events for <span id="selectedDateDisplay"></span></h6>
                            <button type="button" class="btn btn-body btn-sm" onclick="createEventForSelectedDay()">
                                <i class="bi bi-plus-circle me-1"></i>Add Event
                            </button>
                        </div>
                    </div>
                </div>
                
                <div id="dayEventsList">
                    <!-- Events will be populated here -->
                </div>
                
                <div id="noDayEventsMessage" class="text-center py-4" style="display: none;">
                    <div class="mb-3">
                        <i class="bi bi-calendar-x display-4 text-muted opacity-50"></i>
                    </div>
                    <h6 class="text-muted mb-2">No events for this day</h6>
                    <p class="text-muted mb-3">Click "Add Event" to schedule something</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Color Settings Modal -->
<div class="modal fade" id="colorSettingsModal" tabindex="-1" aria-labelledby="colorSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-body text-body">
                <h5 class="modal-title" id="colorSettingsModalLabel">
                    <i class="bi bi-palette me-2"></i>Event Color Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-4">
                    <div class="col-12">
                        <p class="text-muted mb-3">Customize colors for different event categories to better organize your calendar.</p>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-body text-body">
                                <h6 class="mb-0"><i class="bi bi-briefcase me-2"></i>Work Events</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="workColorPicker" class="form-label">Primary Color</label>
                                    <input type="color" class="form-control form-control-color" id="workColorPicker" value="#5fb3d4" title="Choose work events color">
                                </div>
                                <div class="event-preview" id="workPreview">
                                    <div class="event-title event-work">Sample Work Event</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6 mb-4">
                        <div class="card h-100 bg-body text-body">
                            <div class="card-header bg-body text-body">
                                <h6 class="mb-0"><i class="bi bi-camera-video me-2"></i>Meeting Events</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="meetingColorPicker" class="form-label">Primary Color</label>
                                    <input type="color" class="form-control form-control-color" id="meetingColorPicker" value="#28a745" title="Choose meeting events color">
                                </div>
                                <div class="event-preview" id="meetingPreview">
                                    <div class="event-title event-meeting">Sample Meeting</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-body text-body">
                                <h6 class="mb-0"><i class="bi bi-person me-2"></i>Personal Events</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="personalColorPicker" class="form-label">Primary Color</label>
                                    <input type="color" class="form-control form-control-color" id="personalColorPicker" value="#dc3545" title="Choose personal events color">
                                </div>
                                <div class="event-preview" id="personalPreview">
                                    <div class="event-title event-personal">Sample Personal Event</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-6 mb-4">
                        <div class="card h-100">
                            <div class="card-header bg-body text-body">
                                <h6 class="mb-0"><i class="bi bi-bell me-2"></i>Reminder Events</h6>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="reminderColorPicker" class="form-label">Primary Color</label>
                                    <input type="color" class="form-control form-control-color" id="reminderColorPicker" value="#ffc107" title="Choose reminder events color">
                                </div>
                                <div class="event-preview" id="reminderPreview">
                                    <div class="event-title event-reminder">Sample Reminder</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="row mt-4">
                    <div class="col-12">
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle me-2"></i>
                            <strong>Tip:</strong> Colors are saved locally in your browser and will be remembered for future visits.
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="resetColorsBtn">
                    <i class="bi bi-arrow-clockwise me-1"></i>Reset to Default
                </button>
                <button type="button" class="btn btn-primary" id="saveColorsBtn">
                    <i class="bi bi-check-lg me-1"></i>Save Colors
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Circular Time Picker -->
<div class="circular-timepicker-overlay" id="circularTimePicker">
    <div class="circular-timepicker">
        <div class="time-display" id="timeDisplay">12:00</div>
        
        <!-- Mode Toggle -->
        <div class="time-mode-toggle">
            <button class="time-mode-btn active" id="hourModeBtn" onclick="setTimeMode('hours')">
                <i class="bi bi-clock"></i> Hours
            </button>
            <button class="time-mode-btn" id="minuteModeBtn" onclick="setTimeMode('minutes')">
                <i class="bi bi-stopwatch"></i> Minutes
            </button>
        </div>
        
        <div class="clock-face" id="clockFace">
            <div class="clock-center"></div>
            
            <!-- Only show relevant numbers based on mode -->
            <div class="clock-numbers-container" id="clockNumbers">
                <!-- Numbers will be dynamically generated -->
            </div>
        </div>
        
        <!-- Instructions -->
        <div class="time-picker-instructions">
            <span id="modeInstructions">Select hour (1-24)</span>
        </div>
        
        <div class="timepicker-actions">
            <button class="timepicker-btn clear" onclick="clearTime()">CLEAR</button>
            <button class="timepicker-btn cancel" onclick="closeTimePicker()">CANCEL</button>
            <button class="timepicker-btn ok" onclick="confirmTime()">OK</button>
        </div>
    </div>
</div>

<!-- Simple Date Picker Modal -->
<div class="modal fade" id="simpleDatePickerModal" tabindex="-1" aria-labelledby="simpleDatePickerLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="simpleDatePickerLabel">Select Date</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            
            <!-- Calendar Header with Navigation -->
            <div class="simple-calendar-header">
                <button type="button" class="simple-calendar-nav" id="simplePrevMonth">
                    <i class="bi bi-chevron-left"></i>
                </button>
                <div id="simpleMonthYear">January 2025</div>
                <button type="button" class="simple-calendar-nav" id="simpleNextMonth">
                    <i class="bi bi-chevron-right"></i>
                </button>
            </div>
            
            <!-- (Quick buttons & status removed for simpler UI) -->
            
            <!-- Calendar Grid -->
            <div class="simple-calendar-grid">
                <!-- Weekday Headers -->
                <div class="simple-weekdays">
                    <div class="simple-weekday">Sun</div>
                    <div class="simple-weekday">Mon</div>
                    <div class="simple-weekday">Tue</div>
                    <div class="simple-weekday">Wed</div>
                    <div class="simple-weekday">Thu</div>
                    <div class="simple-weekday">Fri</div>
                    <div class="simple-weekday">Sat</div>
                </div>
                
                <!-- Calendar Days Container -->
                <div id="simpleDays">
                    <!-- Days will be generated by JavaScript -->
                </div>
            </div>
            
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmDateBtn" data-bs-dismiss="modal">Select</button>
            </div>
        </div>
    </div>
</div>

<style>
/* Enhanced Calendar Styles */
.day-view-container {
    padding: 1rem;
    background: var(--bs-body-bg);
    color: var(--bs-body-color);
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(var(--bs-dark-rgb), 0.1);
    border: 1px solid var(--bs-border-color);
}

.day-view-header {
    border-bottom: 1px solid var(--bs-border-color);
    padding-bottom: 1rem;
}

.time-slots {
    max-height: 600px;
    overflow-y: auto;
}

.time-slot {
    display: flex;
    border-bottom: 1px solid var(--bs-border-color);
    min-height: 60px;
    position: relative;
}

.time-slot:hover {
    background-color: var(--bs-secondary-bg);
}

.time-label {
    width: 80px;
    padding: 0.5rem;
    font-size: 0.875rem;
    color: var(--bs-secondary-color);
    border-right: 1px solid var(--bs-border-color);
    text-align: right;
}

.time-content {
    flex: 1;
    padding: 0.25rem 0.5rem;
    position: relative;
    cursor: pointer;
}

.day-event {
    background: var(--bs-primary);
    color: var(--bs-primary-text, white);
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    margin: 0.125rem 0;
    cursor: pointer;
    position: relative;
    transition: all 0.2s ease;
}

.day-event:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(var(--bs-dark-rgb), 0.15);
}

.day-event.dragging {
    opacity: 0.6;
}

/* All-day events section */
.all-day-section {
    border-bottom: 2px solid var(--bs-border-color);
    padding: 0.75rem;
    background: var(--bs-light);
}

.all-day-header {
    font-size: 0.875rem;
    color: var(--bs-secondary-color);
    margin-bottom: 0.5rem;
}

.all-day-events-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.all-day-event {
    min-width: 120px;
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    border-left: 4px solid var(--bs-primary);
}

/* Day event categories */
.day-event.event-work {
    background: var(--bs-info);
    color: white;
}

.day-event.event-meeting {
    background: var(--bs-warning);
    color: white;
}

.day-event.event-personal {
    background: var(--bs-success);
    color: white;
}

.day-event.event-reminder {
    background: var(--bs-danger);
    color: white;
}

.day-event.event-default {
    background: var(--bs-primary);
    color: white;
}

.agenda-view-container {
    padding: 1rem;
    background: var(--bs-body-bg);
    color: var(--bs-body-color);
    border-radius: 0.5rem;
    box-shadow: 0 2px 4px rgba(var(--bs-dark-rgb), 0.1);
    border: 1px solid var(--bs-border-color);
}

.agenda-view-header {
    border-bottom: 1px solid var(--bs-border-color);
    padding-bottom: 1rem;
}

.agenda-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.agenda-content {
    max-height: 600px;
    overflow-y: auto;
}

.agenda-day-group {
    margin-bottom: 2rem;
}

.agenda-day-header {
    background: var(--bs-secondary-bg);
    color: var(--bs-body-color);
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
    border-left: 4px solid var(--bs-primary);
}

.agenda-event {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    border: 1px solid var(--bs-border-color);
    border-radius: 0.5rem;
    margin-bottom: 0.5rem;
    background: var(--bs-body-bg);
    color: var(--bs-body-color);
    transition: all 0.2s ease;
    cursor: pointer;
}

.agenda-event:hover {
    box-shadow: 0 2px 8px rgba(var(--bs-dark-rgb), 0.15);
    transform: translateY(-1px);
    background: var(--bs-secondary-bg);
}

.agenda-event-time {
    width: 80px;
    font-weight: 600;
    color: var(--bs-primary);
    font-size: 0.875rem;
}

.agenda-event-details {
    flex: 1;
    margin-left: 1rem;
}

.agenda-event-title {
    font-weight: 600;
    margin-bottom: 0.25rem;
}

.agenda-event-meta {
    font-size: 0.875rem;
    color: var(--bs-secondary-color);
}

.agenda-event-category {
    display: inline-block;
    padding: 0.125rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
    margin-left: 0.5rem;
}

.agenda-event-category.work {
    background: rgba(var(--bs-info-rgb), 0.2);
    color: var(--bs-info);
}

.agenda-event-category.meeting {
    background: rgba(var(--bs-warning-rgb), 0.2);
    color: var(--bs-warning);
}

.agenda-event-category.personal {
    background: rgba(var(--bs-success-rgb), 0.2);
    color: var(--bs-success);
}

.agenda-event-category.reminder {
    background: rgba(var(--bs-danger-rgb), 0.2);
    color: var(--bs-danger);
}

/* Category-specific agenda event styling */
.agenda-event-work {
    border-left: 4px solid var(--bs-info);
}

.agenda-event-meeting {
    border-left: 4px solid var(--bs-warning);
}

.agenda-event-personal {
    border-left: 4px solid var(--bs-success);
}

.agenda-event-reminder {
    border-left: 4px solid var(--bs-danger);
}

/* Enhanced category badges */
.agenda-category-work {
    background: rgba(var(--bs-info-rgb), 0.2);
    color: var(--bs-info);
    border: 1px solid rgba(var(--bs-info-rgb), 0.3);
}

.agenda-category-meeting {
    background: rgba(var(--bs-warning-rgb), 0.2);
    color: var(--bs-warning);
    border: 1px solid rgba(var(--bs-warning-rgb), 0.3);
}

.agenda-category-personal {
    background: rgba(var(--bs-success-rgb), 0.2);
    color: var(--bs-success);
    border: 1px solid rgba(var(--bs-success-rgb), 0.3);
}

.agenda-category-reminder {
    background: rgba(var(--bs-danger-rgb), 0.2);
    color: var(--bs-danger);
    border: 1px solid rgba(var(--bs-danger-rgb), 0.3);
}

.agenda-event-description {
    font-size: 0.8rem;
    max-width: 300px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* Priority indicators */
.event-priority-high,
.agenda-event-priority-high {
    border-left: 4px solid var(--bs-danger);
}

.event-priority-urgent,
.agenda-event-priority-urgent {
    border-left: 4px solid var(--bs-danger);
    animation: pulse 2s infinite;
}

.event-priority-low,
.agenda-event-priority-low {
    border-left: 4px solid var(--bs-secondary);
}

@keyframes pulse {
    0% { border-left-color: var(--bs-danger); }
    50% { border-left-color: var(--bs-warning); }
    100% { border-left-color: var(--bs-danger); }
}

/* Drag and drop styles */
.event-title.draggable {
    cursor: grab;
}

.event-title.dragging {
    cursor: grabbing;
    opacity: 0.6;
    transform: rotate(2deg);
}

.calendar-day.drag-over {
    background-color: rgba(var(--bs-primary-rgb), 0.1) !important;
    border: 2px dashed var(--bs-primary) !important;
}

.drop-indicator {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(var(--bs-primary-rgb), 0.1);
    border: 2px dashed var(--bs-primary);
    border-radius: 0.5rem;
    display: none;
    pointer-events: none;
    z-index: 10;
}

.drop-indicator.show {
    display: block;
}

/* Enhanced recurring event indicators */
.event-recurring::after {
    content: '↻';
    position: absolute;
    top: 2px;
    right: 4px;
    font-size: 0.7rem;
    opacity: 0.7;
}

/* Enhanced event tooltips */
.event-tooltip {
    position: absolute;
    background: var(--bs-dark);
    color: var(--bs-light);
    padding: 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    z-index: 1000;
    max-width: 200px;
    box-shadow: 0 2px 8px rgba(var(--bs-dark-rgb), 0.3);
}

/* View mode transitions */
.view-transition {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.3s ease;
}

.view-transition.active {
    opacity: 1;
    transform: translateY(0);
}

/* Enhanced form fields */
.form-check-input:checked {
    background-color: var(--bs-primary);
    border-color: var(--bs-primary);
}

.priority-urgent .form-label {
    color: #dc3545;
    font-weight: 600;
}

/* Responsive improvements */
@media (max-width: 768px) {
    .day-view-container,
    .agenda-view-container {
        padding: 0.5rem;
    }
    
    .agenda-event {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .agenda-event-time {
        width: auto;
        margin-bottom: 0.5rem;
    }
    
    .agenda-event-details {
        margin-left: 0;
    }
}
</style>

<script>
    // Enhanced Event Creation with Time
    window.createEventAtTime = function(dateTime) {
        // Set the date and time in the create event modal
        const startDate = dateTime.toISOString().split('T')[0];
        const startTime = dateTime.toTimeString().split(' ')[0].substring(0, 5);

        // Open the modal (Bootstrap 5)
        const modalEl = document.getElementById('addEventModal');
        if (modalEl) {
            const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
            modal.show();
        }

        // Pre-fill the date and time after modal is visible
        setTimeout(() => {
            // Set hidden date inputs
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const startTimeInput = document.getElementById('startTime');
            const endTimeInput = document.getElementById('endTime');

            if (startDateInput) startDateInput.value = startDate;
            if (endDateInput) endDateInput.value = startDate;
            if (startTimeInput) startTimeInput.value = startTime;

            // Calculate end time (1 hour later)
            const endDateTime = new Date(dateTime.getTime() + 60 * 60 * 1000);
            const endTime = endDateTime.toTimeString().split(' ')[0].substring(0, 5);
            if (endTimeInput) endTimeInput.value = endTime;

            // Update display elements
            const startTimeDisplay = document.getElementById('startTimeDisplay');
            const endTimeDisplay = document.getElementById('endTimeDisplay');
            const dateRangeInput = document.getElementById('dateRange');

            if (startTimeDisplay) startTimeDisplay.textContent = startTime;
            if (endTimeDisplay) endTimeDisplay.textContent = endTime;
            if (dateRangeInput) {
                dateRangeInput.value = `${startDate} to ${startDate}`;
                // Trigger date picker update if needed
                if (window.updateDatePickerDisplay) {
                    window.updateDatePickerDisplay();
                }
            }

            // Uncheck all-day if we're setting a specific time
            const allDayCheckbox = document.getElementById('allDay');
            if (allDayCheckbox) {
                allDayCheckbox.checked = false;
                // Show time fields
                const timeFields = document.getElementById('timeFields');
                if (timeFields) timeFields.style.display = 'flex';
            }
        }, 200);
    };

    // Enhanced Drag and Drop Functions
    function setupDragAndDrop() {
        // Make events draggable
        function makeEventsDraggable() {
            document.querySelectorAll('.event-title').forEach(eventElement => {
                eventElement.draggable = true;
                eventElement.classList.add('draggable');
                
                eventElement.addEventListener('dragstart', function(e) {
                    draggedEvent = {
                        element: this,
                        eventData: JSON.parse(this.getAttribute('data-event') || '{}'),
                        originalParent: this.parentElement
                    };
                    
                    this.classList.add('dragging');
                    e.dataTransfer.effectAllowed = 'move';
                });
                
                eventElement.addEventListener('dragend', function(e) {
                    this.classList.remove('dragging');
                    draggedEvent = null;
                });
            });
        }
        
        // Make calendar cells droppable
        function makeCalendarDroppable() {
            document.querySelectorAll('.calendar-day').forEach(dayCell => {
                dayCell.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    e.dataTransfer.dropEffect = 'move';
                    this.classList.add('drag-over');
                });
                
                dayCell.addEventListener('dragleave', function(e) {
                    this.classList.remove('drag-over');
                });
                
                dayCell.addEventListener('drop', function(e) {
                    e.preventDefault();
                    this.classList.remove('drag-over');
                    
                    if (draggedEvent) {
                        const newDate = this.getAttribute('data-date');
                        const newHour = this.getAttribute('data-hour');
                        
                        if (newDate) {
                            moveEventToNewDate(draggedEvent.eventData, newDate, newHour);
                        }
                    }
                });
            });
        }
        
        // Call setup functions
        makeEventsDraggable();
        makeCalendarDroppable();
    }

    // Move event to new date/time
    async function moveEventToNewDate(eventData, newDate, newHour) {
        try {
            const originalStart = new Date(eventData.start);
            const originalEnd = new Date(eventData.end);
            const duration = originalEnd.getTime() - originalStart.getTime();
            
            const newStart = new Date(newDate);
            if (newHour) {
                newStart.setHours(parseInt(newHour), 0, 0, 0);
            } else {
                newStart.setHours(originalStart.getHours(), originalStart.getMinutes(), 0, 0);
            }
            
            const newEnd = new Date(newStart.getTime() + duration);
            
            // Update event via API
            const response = await fetch(`/calendar/update-event/${eventData.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ...eventData,
                    startDate: newStart.toISOString().split('T')[0],
                    endDate: newEnd.toISOString().split('T')[0],
                    startTime: newStart.toTimeString().split(' ')[0].substring(0, 5),
                    endTime: newEnd.toTimeString().split(' ')[0].substring(0, 5)
                })
            });
            
            if (response.ok) {
                // Refresh the current view
                if (currentViewMode === 'month') {
                    generateCalendar(currentMonth, currentYear);
                } else if (currentViewMode === 'week') {
                    generateWeekView(currentWeekStart);
                } else if (currentViewMode === 'day') {
                    generateDayView(currentDayView);
                } else if (currentViewMode === 'agenda') {
                    generateAgendaView();
                }
                
                // Reload events
                if (googleConnected) {
                    loadGoogleCalendarEvents();
                }
                
                // Show success notification
                showNotification('Event moved successfully!', 'success');
            } else {
                throw new Error('Failed to move event');
            }
        } catch (error) {
            console.error('Error moving event:', error);
            showNotification('Failed to move event. Please try again.', 'error');
        }
    }

    // Enhanced Agenda Period Change Handler
    document.addEventListener('change', function(e) {
        if (e.target.id === 'agendaPeriod') {
            console.log('Agenda period changed to:', e.target.value);
            generateAgendaView();
        }
    });

document.addEventListener('DOMContentLoaded', function() {
    const currentDate = new Date();
    let currentMonth = currentDate.getMonth();
    let currentYear = currentDate.getFullYear();
    let currentViewMode = 'month'; // 'month', 'week', 'day', or 'agenda'
    let currentDayView = new Date();
    
    // Enhanced drag and drop state
    let draggedEvent = null;
    let draggedEventOriginalDate = null;
    let currentWeekStart = new Date(); // For week view

    // Initialize current week to start of this week (Sunday)
    const today = new Date();
    const dayOfWeek = today.getDay();
    currentWeekStart = new Date(today);
    currentWeekStart.setDate(today.getDate() - dayOfWeek);

    // Circular Time Picker State (moved here to avoid initialization issues)
    window.currentTimePicker = {
        targetElement: null,
        displayElement: null,
        hours: 12,
        minutes: 0,
        ampm: 'AM',
        selectingMinutes: false
    };

    // Translated month names - will be updated by language system
    let monthNames = [
        'January', 'February', 'March', 'April', 'May', 'June',
        'July', 'August', 'September', 'October', 'November', 'December'
    ];
    
    // Function to get translated month names
    function getMonthNames() {
        if (window.LanguageManager && window.LanguageManager.isLoaded) {
            return [
                window.LanguageManager.t('calendar.monthNames.january'),
                window.LanguageManager.t('calendar.monthNames.february'),
                window.LanguageManager.t('calendar.monthNames.march'),
                window.LanguageManager.t('calendar.monthNames.april'),
                window.LanguageManager.t('calendar.monthNames.may'),
                window.LanguageManager.t('calendar.monthNames.june'),
                window.LanguageManager.t('calendar.monthNames.july'),
                window.LanguageManager.t('calendar.monthNames.august'),
                window.LanguageManager.t('calendar.monthNames.september'),
                window.LanguageManager.t('calendar.monthNames.october'),
                window.LanguageManager.t('calendar.monthNames.november'),
                window.LanguageManager.t('calendar.monthNames.december')
            ];
        }
        return monthNames;
    }

    // Update current time
    function updateTime() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('en-US', { 
            hour: '2-digit', 
            minute: '2-digit',
            hour12: true 
        });
        document.getElementById('currentTime').textContent = timeString;
    }

    // Update time immediately and then every minute
    updateTime();
    setInterval(updateTime, 60000);

    function generateCalendar(month, year) {
        const firstDay = new Date(year, month, 1).getDay();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const today = new Date();

        // Show thead for month view
        const thead = document.querySelector('#calendarTable thead');
        if (thead) {
            thead.style.display = 'table-header-group';
            thead.style.visibility = 'visible';
        }

        const translatedMonthNames = getMonthNames();
        document.getElementById('currentMonth').textContent = `${translatedMonthNames[month]} ${year}`;

        const calendarBody = document.getElementById('calendarBody');
        calendarBody.innerHTML = '';

        let date = 1;

        // Create calendar rows
        for (let i = 0; i < 6; i++) {
            const row = document.createElement('tr');

            for (let j = 0; j < 7; j++) {
                const cell = document.createElement('td');
                cell.className = 'text-center calendar-day position-relative';
                cell.style.height = '85px';
                cell.style.verticalAlign = 'top';
                cell.style.cursor = 'pointer';
                cell.style.padding = '6px';
                cell.style.transition = 'background .15s ease';
                
                // Add hover effect for the entire cell
                cell.addEventListener('mouseenter', function() {
                    if (!this.classList.contains('empty-cell')) {
                        this.style.backgroundColor = 'rgba(var(--bs-primary-rgb), 0.02)';
                        this.style.borderColor = 'rgba(var(--bs-primary-rgb), 0.3)';
                    }
                });
                cell.addEventListener('mouseleave', function() {
                    if (!this.classList.contains('empty-cell')) {
                        this.style.backgroundColor = 'transparent';
                        this.style.borderColor = 'var(--bs-border-color)';
                    }
                });
                
                if (i === 0 && j < firstDay) {
                    // Empty cells before month starts
                    cell.innerHTML = '';
                    cell.style.cursor = 'default';
                    cell.classList.add('empty-cell');
                } else if (date > daysInMonth) {
                    // Empty cells after month ends
                    cell.innerHTML = '';
                    cell.style.cursor = 'default';
                    cell.classList.add('empty-cell');
                } else {
                    // Days of the month
                    const dayElement = document.createElement('div');
                    dayElement.className = 'day-number fw-bold mb-1';
                    dayElement.textContent = date;
                    dayElement.style.cursor = 'pointer';
                    dayElement.style.padding = '4px 6px';
                    dayElement.style.borderRadius = '6px';
                    dayElement.style.display = 'inline-block';
                    dayElement.style.minWidth = '24px';
                    dayElement.style.textAlign = 'center';
                    dayElement.style.transition = 'all 0.2s ease';
                    dayElement.style.fontWeight = 'bold';
                    dayElement.style.position = 'relative';
                    dayElement.style.zIndex = '10'; // Ensure day number is always on top
                    dayElement.style.marginBottom = '2px';
                    dayElement.title = 'Click to view day details';
                    
                    // Add hover effect
                    
                    // Add onclick handler for day number (more reliable than addEventListener)
                    dayElement.onclick = (function(capturedDate) {
                        return function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            e.stopImmediatePropagation();
                            console.log('Day number ONCLICK:', capturedDate, 'Month:', month, 'Year:', year);
                            window.showDayDetails(capturedDate, month, year);
                            return false;
                        };
                    })(date);

                    // Add click handler to the entire cell for day details
                    cell.onclick = (function(capturedDate) {
                        return function(e) {
                            // Only trigger if the click wasn't on an event title
                            if (!e.target.classList.contains('event-title')) {
                                e.preventDefault();
                                e.stopPropagation();
                                e.stopImmediatePropagation();
                                console.log('Cell ONCLICK for date:', capturedDate, 'Month:', month, 'Year:', year);
                                window.showDayDetails(capturedDate, month, year);
                                return false;
                            }
                        };
                    })(date);
                    
                    // Highlight today
                    if (year === today.getFullYear() && 
                        month === today.getMonth() && 
                        date === today.getDate()) {
                        cell.classList.add('today-cell');
                        cell.innerHTML = `
                            <div class="today-badge">
                                <div class="day-number fw-bold text-white" style="cursor: pointer; padding: 4px 6px; border-radius: 6px; display: inline-block; min-width: 24px; text-align: center; position: relative; z-index: 10; margin-bottom: 2px;" title="Click to view day details">${date}</div>
                                <small class="text-white">${window.LanguageManager ? window.LanguageManager.t('calendar.today') : 'Today'}</small>
                            </div>
                        `;
                        
                        // Add onclick handler to today's day number (more reliable)
                        const todayDayNumber = cell.querySelector('.day-number');
                        if (todayDayNumber) {
                            todayDayNumber.onclick = (function(capturedDate) {
                                return function(e) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    e.stopImmediatePropagation();
                                    console.log('Today day number ONCLICK:', capturedDate, 'Month:', month, 'Year:', year);
                                    window.showDayDetails(capturedDate, month, year);
                                    return false;
                                };
                            })(date);
                        }

                        // Add click handler to today's entire cell
                        cell.onclick = (function(capturedDate) {
                            return function(e) {
                                // Only trigger if the click wasn't on an event title
                                if (!e.target.classList.contains('event-title')) {
                                    e.preventDefault();
                                    e.stopPropagation();
                                    e.stopImmediatePropagation();
                                    console.log('Today cell ONCLICK for date:', capturedDate, 'Month:', month, 'Year:', year);
                                    window.showDayDetails(capturedDate, month, year);
                                    return false;
                                }
                            };
                        })(date);
                    } else {
                        cell.appendChild(dayElement);
                        
                        // Weekend styling
                        if (j === 0 || j === 6) {
                            cell.classList.add('weekend-cell');
                            dayElement.classList.add('text-muted'); // Muted color for weekend dates
                        }
                    }
                    
                    // Set initial styling based on cell type
                    if (!cell.classList.contains('today-cell')) {
                        if (j === 0 || j === 6) {
                            cell.classList.add('weekend-cell');
                        }
                        
                        // No hover effects for flat design
                    }
                    
                    date++;
                }
                
                row.appendChild(cell);
            }
            calendarBody.appendChild(row);
            
            // Break if we've filled all days
            if (date > daysInMonth) {
                break;
            }
        }
    }

    function generateWeekView(weekStart) {
        const today = new Date();
        const weekEnd = new Date(weekStart);
        weekEnd.setDate(weekStart.getDate() + 6);
        
        // Hide thead for week view to avoid duplicate headers
        const thead = document.querySelector('#calendarTable thead');
        if (thead) {
            thead.style.display = 'none';
            thead.style.visibility = 'hidden';
        }
        
        // Update header with week range
        const translatedMonthNames = getMonthNames();
        const startMonth = translatedMonthNames[weekStart.getMonth()];
        const endMonth = translatedMonthNames[weekEnd.getMonth()];
        
        if (weekStart.getMonth() === weekEnd.getMonth()) {
            document.getElementById('currentMonth').textContent = `${startMonth} ${weekStart.getDate()}-${weekEnd.getDate()}, ${weekStart.getFullYear()}`;
        } else {
            document.getElementById('currentMonth').textContent = `${startMonth} ${weekStart.getDate()} - ${endMonth} ${weekEnd.getDate()}, ${weekStart.getFullYear()}`;
        }
        
        const calendarBody = document.getElementById('calendarBody');
        calendarBody.innerHTML = '';
        
        // Create header row with day names and dates (single row)
        const headerRow = document.createElement('tr');
        headerRow.className = 'week-header-row';
        
        // Empty cell for time column
        const timeHeaderCell = document.createElement('th');
        timeHeaderCell.className = 'time-column-header week-time-header';
        timeHeaderCell.style.width = '80px';
        timeHeaderCell.style.minWidth = '80px';
        timeHeaderCell.style.border = '1px solid var(--bs-border-color)';
        timeHeaderCell.style.fontWeight = 'bold';
        timeHeaderCell.style.fontSize = '0.65rem';
        timeHeaderCell.style.padding = '6px 2px';
        timeHeaderCell.style.position = 'sticky';
        timeHeaderCell.style.top = '0';
        timeHeaderCell.style.zIndex = '10';
        timeHeaderCell.textContent = '';
        headerRow.appendChild(timeHeaderCell);
        
        // Day header cells - single row with day name and date
        for (let i = 0; i < 7; i++) {
            const currentDay = new Date(weekStart);
            currentDay.setDate(weekStart.getDate() + i);
            
            const dayHeaderCell = document.createElement('th');
            dayHeaderCell.className = 'day-header-cell text-center week-day-header';
            dayHeaderCell.style.border = '1px solid var(--bs-border-color)';
            dayHeaderCell.style.fontWeight = 'bold';
            dayHeaderCell.style.padding = '8px 4px';
            dayHeaderCell.style.position = 'sticky';
            dayHeaderCell.style.top = '0';
            dayHeaderCell.style.zIndex = '10';
            dayHeaderCell.style.minWidth = '120px';
            
            const dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][currentDay.getDay()];
            const dayNumber = currentDay.getDate();
            
            // Simple styling like month view - no blue background
            dayHeaderCell.innerHTML = `<div class="fw-bold">${dayName}</div><div>${dayNumber}</div>`;
            
            // Highlight today with similar styling to month view
            if (currentDay.toDateString() === today.toDateString()) {
                dayHeaderCell.classList.add('today-header');
            }
            
            // Weekend styling
            if (i === 0 || i === 6) {
                dayHeaderCell.classList.add('weekend-header');
            }
            
            headerRow.appendChild(dayHeaderCell);
        }
        
        calendarBody.appendChild(headerRow);
        
        // Create all-day events row
        const allDayRow = document.createElement('tr');
        allDayRow.className = 'all-day-events-row';
        
        // Time label for all-day events
        const allDayTimeCell = document.createElement('td');
        allDayTimeCell.className = 'time-cell all-day-time';
        allDayTimeCell.style.width = '80px';
        allDayTimeCell.style.minWidth = '80px';
        allDayTimeCell.style.border = '1px solid var(--bs-border-color)';
        allDayTimeCell.style.textAlign = 'center';
        allDayTimeCell.style.fontWeight = 'bold';
        allDayTimeCell.style.fontSize = '0.65rem';
        allDayTimeCell.style.verticalAlign = 'middle';
        allDayTimeCell.style.borderRight = '2px solid var(--bs-border-color)';
        allDayTimeCell.textContent = 'All Day';
        allDayRow.appendChild(allDayTimeCell);
        
        // All-day event cells for each day
        for (let i = 0; i < 7; i++) {
            const currentDay = new Date(weekStart);
            currentDay.setDate(weekStart.getDate() + i);
            
            const allDayCell = document.createElement('td');
            allDayCell.className = 'calendar-day all-day-cell position-relative';
            allDayCell.style.border = '1px solid var(--bs-border-color)';
            allDayCell.style.verticalAlign = 'top';
            allDayCell.style.backgroundColor = 'rgba(var(--bs-info-rgb), 0.05)';
            
            // Add data attributes for all-day event positioning
            allDayCell.setAttribute('data-date', currentDay.toISOString().split('T')[0]);
            allDayCell.setAttribute('data-all-day', 'true');
            allDayCell.setAttribute('data-day-index', i);
            
            // Highlight today column
            if (currentDay.toDateString() === today.toDateString()) {
                allDayCell.style.backgroundColor = 'rgba(var(--bs-primary-rgb), 0.1)';
                allDayCell.classList.add('today-column');
            }
            
            // Weekend styling
            if (i === 0 || i === 6) {
                allDayCell.classList.add('weekend-cell');
                allDayCell.style.backgroundColor = 'rgba(var(--bs-secondary-rgb), 0.08)';
            }
            
            allDayRow.appendChild(allDayCell);
        }
        
        calendarBody.appendChild(allDayRow);
        
        // Create time slot rows (6 AM to 11 PM = 18 hours) with even shorter cells
        for (let hour = 6; hour <= 23; hour++) {
            const timeRow = document.createElement('tr');
            timeRow.className = 'time-slot-row';
            timeRow.setAttribute('data-hour', hour);
            
            // Time label cell
            const timeCell = document.createElement('td');
            timeCell.className = 'time-cell';
            timeCell.style.width = '80px';
            timeCell.style.minWidth = '80px';
            timeCell.style.border = '1px solid var(--bs-border-color)';
            timeCell.style.textAlign = 'center';
            timeCell.style.fontWeight = 'bold';
            timeCell.style.fontSize = '0.7rem';
            timeCell.style.padding = '2px';
            timeCell.style.verticalAlign = 'middle';
            timeCell.style.borderRight = '2px solid var(--bs-border-color)';
            
            const timeLabel = hour === 12 ? '12 PM' : 
                             hour > 12 ? `${hour - 12} PM` : 
                             hour === 0 ? '12 AM' : `${hour} AM`;
            timeCell.textContent = timeLabel;
            
            timeRow.appendChild(timeCell);
            
            // Day cells for this hour
            for (let i = 0; i < 7; i++) {
                const currentDay = new Date(weekStart);
                currentDay.setDate(weekStart.getDate() + i);
                
                const dayCell = document.createElement('td');
                dayCell.className = 'calendar-day time-slot-cell position-relative';
                dayCell.style.border = '1px solid var(--bs-border-color)';
                dayCell.style.verticalAlign = 'top';
                dayCell.style.cursor = 'pointer';
                dayCell.style.transition = 'all 0.2s ease';
                
                // Add data attributes for event positioning
                dayCell.setAttribute('data-date', currentDay.toISOString().split('T')[0]);
                dayCell.setAttribute('data-hour', hour);
                dayCell.setAttribute('data-day-index', i);
                
                // Add hover effect
                dayCell.addEventListener('mouseenter', function() {
                    this.style.backgroundColor = 'rgba(var(--bs-primary-rgb), 0.05)';
                });
                dayCell.addEventListener('mouseleave', function() {
                    this.style.backgroundColor = 'transparent';
                });
                
                // Highlight today column with subtle styling like month view
                if (currentDay.toDateString() === today.toDateString()) {
                    dayCell.style.backgroundColor = 'rgba(var(--bs-primary-rgb), 0.02)';
                    dayCell.classList.add('today-column');
                }
                
                // Weekend styling
                if (i === 0 || i === 6) {
                    dayCell.classList.add('weekend-cell');
                    dayCell.style.backgroundColor = 'rgba(var(--bs-secondary-rgb), 0.02)';
                }
                
                // Current hour highlighting
                const currentHour = new Date().getHours();
                if (currentDay.toDateString() === today.toDateString() && hour === currentHour) {
                    dayCell.style.backgroundColor = 'rgba(var(--bs-warning-rgb), 0.1)';
                    dayCell.style.borderLeft = '3px solid var(--bs-warning)';
                    dayCell.classList.add('current-hour');
                }
                
                // Add click handler for creating events at specific time
                dayCell.addEventListener('click', function(e) {
                    if (!e.target.classList.contains('week-event')) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        const cellDate = currentDay.getDate();
                        const cellMonth = currentDay.getMonth();
                        const cellYear = currentDay.getFullYear();
                        
                        console.log(`Creating event at ${hour}:00 on ${cellDate}/${cellMonth + 1}/${cellYear}`);
                        window.showDayDetails(cellDate, cellMonth, cellYear, hour);
                    }
                });
                
                timeRow.appendChild(dayCell);
            }
            
            calendarBody.appendChild(timeRow);
        }
    }

    // Event listeners for navigation with smooth transitions
    document.getElementById('prevPeriod').addEventListener('click', function() {
        this.disabled = true;
        
        if (currentViewMode === 'month') {
            currentMonth--;
            if (currentMonth < 0) {
                currentMonth = 11;
                currentYear--;
            }
        } else if (currentViewMode === 'week') {
            // Week view - go back one week
            currentWeekStart.setDate(currentWeekStart.getDate() - 7);
        } else if (currentViewMode === 'day') {
            // Day view - go back one day
            currentDayView.setDate(currentDayView.getDate() - 1);
        }
        
        setTimeout(() => {
            if (currentViewMode === 'month') {
                generateCalendar(currentMonth, currentYear);
            } else if (currentViewMode === 'week') {
                generateWeekView(currentWeekStart);
            } else if (currentViewMode === 'day') {
                generateDayView(currentDayView);
            } else if (currentViewMode === 'agenda') {
                generateAgendaView();
            }
            // Only load events if Google Calendar is connected
            if (googleConnected) {
                loadGoogleCalendarEvents();
            }
            this.disabled = false;
        }, 150);
    });

    document.getElementById('nextPeriod').addEventListener('click', function() {
        this.disabled = true;
        
        if (currentViewMode === 'month') {
            currentMonth++;
            if (currentMonth > 11) {
                currentMonth = 0;
                currentYear++;
            }
        } else if (currentViewMode === 'week') {
            // Week view - go forward one week
            currentWeekStart.setDate(currentWeekStart.getDate() + 7);
        } else if (currentViewMode === 'day') {
            // Day view - go forward one day
            currentDayView.setDate(currentDayView.getDate() + 1);
        }
        
        setTimeout(() => {
            if (currentViewMode === 'month') {
                generateCalendar(currentMonth, currentYear);
            } else if (currentViewMode === 'week') {
                generateWeekView(currentWeekStart);
            } else if (currentViewMode === 'day') {
                generateDayView(currentDayView);
            } else if (currentViewMode === 'agenda') {
                generateAgendaView();
            }
            // Only load events if Google Calendar is connected
            if (googleConnected) {
                loadGoogleCalendarEvents();
            }
            this.disabled = false;
        }, 150);
    });    document.getElementById('todayBtn').addEventListener('click', function() {
        const today = new Date();
        
        if (currentViewMode === 'month') {
            currentMonth = today.getMonth();
            currentYear = today.getFullYear();
            generateCalendar(currentMonth, currentYear);
        } else if (currentViewMode === 'week') {
            // Week view - set to current week
            const dayOfWeek = today.getDay();
            currentWeekStart = new Date(today);
            currentWeekStart.setDate(today.getDate() - dayOfWeek);
            generateWeekView(currentWeekStart);
        } else if (currentViewMode === 'day') {
            // Day view - set to today
            currentDayView = new Date(today);
            generateDayView(currentDayView);
        } else if (currentViewMode === 'agenda') {
            generateAgendaView();
        }
        
        // Only load events if Google Calendar is connected
        if (googleConnected) {
            loadGoogleCalendarEvents();
        }
    });

    // Function to update navigation button text based on view mode
    function updateNavigationButtonText() {
        const prevButton = document.getElementById('prevPeriod');
        const nextButton = document.getElementById('nextPeriod');
        
        if (currentViewMode === 'week') {
            // Update tooltip for week mode
            if (window.LanguageManager && window.LanguageManager.t) {
                prevButton.title = window.LanguageManager.t('calendar.previousWeek') || 'Previous Week';
                nextButton.title = window.LanguageManager.t('calendar.nextWeek') || 'Next Week';
            } else {
                prevButton.title = 'Previous Week';
                nextButton.title = 'Next Week';
            }
        } else {
            // Update tooltip for month mode
            if (window.LanguageManager && window.LanguageManager.t) {
                prevButton.title = window.LanguageManager.t('calendar.previousMonth') || 'Previous Month';
                nextButton.title = window.LanguageManager.t('calendar.nextMonth') || 'Next Month';
            } else {
                prevButton.title = 'Previous Month';
                nextButton.title = 'Next Month';
            }
        }
    }

    // View mode switchers
    document.getElementById('monthViewBtn').addEventListener('click', function() {
        console.log('Month view button clicked! Current mode:', currentViewMode);
        if (currentViewMode !== 'month') {
            console.log('Switching to month view...');
            currentViewMode = 'month';
            
            // Update button states
            this.classList.add('active');
            document.getElementById('weekViewBtn').classList.remove('active');
            document.getElementById('dayViewBtn').classList.remove('active');
            document.getElementById('agendaViewBtn').classList.remove('active');
            
            // Show/hide views
            document.getElementById('monthWeekView').style.display = 'block';
            document.getElementById('dayView').style.display = 'none';
            document.getElementById('agendaView').style.display = 'none';
            
            // Update navigation button text
            updateNavigationButtonText();
            
            // Generate month view
            generateCalendar(currentMonth, currentYear);
            // Only load events if Google Calendar is connected
            if (googleConnected) {
                loadGoogleCalendarEvents();
            }
        } else {
            console.log('Already in month view, no action needed');
        }
    });

    document.getElementById('weekViewBtn').addEventListener('click', function() {
        console.log('Week view button clicked! Current mode:', currentViewMode);
        if (currentViewMode !== 'week') {
            console.log('Switching to week view...');
            currentViewMode = 'week';
            
            // Update button states
            this.classList.add('active');
            document.getElementById('monthViewBtn').classList.remove('active');
            document.getElementById('dayViewBtn').classList.remove('active');
            document.getElementById('agendaViewBtn').classList.remove('active');
            
            // Show/hide views
            document.getElementById('monthWeekView').style.display = 'block';
            document.getElementById('dayView').style.display = 'none';
            document.getElementById('agendaView').style.display = 'none';
            
            // Update navigation button text
            updateNavigationButtonText();
            
            // Set week start based on current month view
            const firstOfMonth = new Date(currentYear, currentMonth, 1);
            const dayOfWeek = firstOfMonth.getDay();
            currentWeekStart = new Date(firstOfMonth);
            currentWeekStart.setDate(firstOfMonth.getDate() - dayOfWeek);
            
            console.log('Week start calculated:', currentWeekStart);
            
            // Generate week view
            try {
                generateWeekView(currentWeekStart);
                console.log('Week view generated successfully');
            } catch (error) {
                console.error('Error generating week view:', error);
            }
            
            // Only load events if Google Calendar is connected
            if (googleConnected) {
                loadGoogleCalendarEvents();
            }
        } else {
            console.log('Already in week view, no action needed');
        }
    });

    // Day View Button Handler
    document.getElementById('dayViewBtn').addEventListener('click', function() {
        console.log('Day view button clicked! Current mode:', currentViewMode);
        if (currentViewMode !== 'day') {
            console.log('Switching to day view...');
            currentViewMode = 'day';
            
            // Set to today if not already set
            if (!currentDayView || currentDayView.toDateString() === 'Invalid Date') {
                currentDayView = new Date();
            }
            
            // Update button states
            this.classList.add('active');
            document.getElementById('monthViewBtn').classList.remove('active');
            document.getElementById('weekViewBtn').classList.remove('active');
            document.getElementById('agendaViewBtn').classList.remove('active');
            
            // Show/hide views
            document.getElementById('monthWeekView').style.display = 'none';
            document.getElementById('dayView').style.display = 'block';
            document.getElementById('agendaView').style.display = 'none';
            
            // Generate day view
            generateDayView(currentDayView);
            
            // Only load events if Google Calendar is connected
            if (googleConnected) {
                loadGoogleCalendarEvents();
            }
        } else {
            console.log('Already in day view, no action needed');
        }
    });

    // Agenda View Button Handler
    document.getElementById('agendaViewBtn').addEventListener('click', function() {
        console.log('Agenda view button clicked! Current mode:', currentViewMode);
        if (currentViewMode !== 'agenda') {
            console.log('Switching to agenda view...');
            currentViewMode = 'agenda';
            
            // Update button states
            this.classList.add('active');
            document.getElementById('monthViewBtn').classList.remove('active');
            document.getElementById('weekViewBtn').classList.remove('active');
            document.getElementById('dayViewBtn').classList.remove('active');
            
            // Show/hide views
            document.getElementById('monthWeekView').style.display = 'none';
            document.getElementById('dayView').style.display = 'none';
            document.getElementById('agendaView').style.display = 'block';
            
            // Debug: Check available events
            console.log('Available events for agenda:', window.googleEvents);
            
            // Generate agenda view
            generateAgendaView();
            
            // Only load events if Google Calendar is connected
            if (googleConnected) {
                loadGoogleCalendarEvents();
            }
        } else {
            console.log('Already in agenda view, no action needed');
        }
    });

    // Day View Generator
    function generateDayView(date) {
        const dayViewTitle = document.getElementById('dayViewTitle');
        const timeSlots = document.getElementById('timeSlots');
        
        // Update title
        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
        dayViewTitle.textContent = date.toLocaleDateString('en-US', options);
        
        // Clear existing content
        timeSlots.innerHTML = '';
        
        // Get events for this specific day
        const dateStr = date.toISOString().split('T')[0];
        const dayEvents = window.googleEvents.filter(event => {
            const eventDate = new Date(event.start).toISOString().split('T')[0];
            return eventDate === dateStr;
        });
        
        console.log('generateDayView: Day events:', dayEvents);
        dayEvents.forEach(event => {
            console.log(`Day event: "${event.title}" - category: "${event.category || 'none/undefined'}"`);
        });
        
        // Separate all-day and timed events
        const allDayEvents = dayEvents.filter(event => event.allDay);
        const timedEvents = dayEvents.filter(event => !event.allDay);
        
        // Create all-day events section if there are any
        if (allDayEvents.length > 0) {
            const allDaySection = document.createElement('div');
            allDaySection.className = 'all-day-section mb-3';
            
            const allDayHeader = document.createElement('div');
            allDayHeader.className = 'all-day-header';
            allDayHeader.innerHTML = '<strong>All Day</strong>';
            allDaySection.appendChild(allDayHeader);
            
            const allDayContainer = document.createElement('div');
            allDayContainer.className = 'all-day-events-container';
            
            allDayEvents.forEach(event => {
                const eventElement = document.createElement('div');
                const eventCategory = categorizeEvent(event);
                eventElement.className = `day-event all-day-event event-${eventCategory}`;
                eventElement.textContent = event.title;
                eventElement.setAttribute('data-event', JSON.stringify(event));
                
                console.log(`All-day event: "${event.title}" assigned category: "${eventCategory}"`);
                
                // Add priority class if set
                if (event.priority && event.priority !== 'normal') {
                    eventElement.classList.add(`event-priority-${event.priority}`);
                }
                
                // Add recurring indicator
                if (event.recurring) {
                    eventElement.classList.add('event-recurring');
                }
                
                // Make draggable
                eventElement.draggable = true;
                eventElement.classList.add('draggable');
                
                // Add click handler to show event details
                eventElement.addEventListener('click', function(e) {
                    e.stopPropagation();
                    window.showEventDetails(event);
                });
                
                allDayContainer.appendChild(eventElement);
            });
            
            allDaySection.appendChild(allDayContainer);
            timeSlots.appendChild(allDaySection);
        }
        
        // Generate time slots from 6 AM to 11 PM
        for (let hour = 6; hour <= 23; hour++) {
            const timeSlot = document.createElement('div');
            timeSlot.className = 'time-slot';
            timeSlot.setAttribute('data-hour', hour);
            timeSlot.setAttribute('data-date', dateStr);
            
            const timeLabel = document.createElement('div');
            timeLabel.className = 'time-label';
            timeLabel.textContent = hour === 12 ? '12 PM' : 
                                   hour > 12 ? `${hour - 12} PM` : 
                                   hour === 0 ? '12 AM' : `${hour} AM`;
            
            const timeContent = document.createElement('div');
            timeContent.className = 'time-content';
            timeContent.setAttribute('data-hour', hour);
            
            // Add timed events for this hour only
            const hourEvents = timedEvents.filter(event => {
                const eventHour = new Date(event.start).getHours();
                return eventHour === hour;
            });
            
            hourEvents.forEach(event => {
                const eventElement = document.createElement('div');
                const eventCategory = categorizeEvent(event);
                eventElement.className = `day-event event-${eventCategory}`;
                eventElement.textContent = event.title;
                eventElement.setAttribute('data-event', JSON.stringify(event));
                
                console.log(`Timed event: "${event.title}" assigned category: "${eventCategory}"`);
                
                // Add priority class if set
                if (event.priority && event.priority !== 'normal') {
                    eventElement.classList.add(`event-priority-${event.priority}`);
                }
                
                // Add recurring indicator
                if (event.recurring) {
                    eventElement.classList.add('event-recurring');
                }
                
                // Make draggable
                eventElement.draggable = true;
                eventElement.classList.add('draggable');
                
                // Add click handler to show event details
                eventElement.addEventListener('click', function(e) {
                    e.stopPropagation();
                    window.showEventDetails(event);
                });
                
                timeContent.appendChild(eventElement);
            });
            
            // Add click handler for creating events
            timeContent.addEventListener('click', function(e) {
                if (e.target === this) { // Only if clicking on empty space
                    const clickedDate = new Date(date);
                    clickedDate.setHours(hour, 0, 0, 0);
                    console.log('[Day View] Opening add event modal for', clickedDate);
                    if (typeof window.createEventAtTime === 'function') {
                        window.createEventAtTime(clickedDate);
                    } else {
                        // Fallback: open generic createEvent if available
                        if (typeof window.createEvent === 'function') {
                            window.createEvent();
                        } else {
                            console.error('No event creation function available!');
                        }
                    }
                }
            });
            
            timeSlot.appendChild(timeLabel);
            timeSlot.appendChild(timeContent);
            timeSlots.appendChild(timeSlot);
        }
        
        // Setup drag and drop for newly created events
        setTimeout(() => {
            setupDragAndDrop();
            
            // Apply user colors after creating day view content
            console.log('generateDayView: Applying user colors...');
            const userColors = loadUserColors();
            console.log('generateDayView: User colors loaded:', userColors);
            applyColors(userColors);
        }, 100);
    }

    // Agenda View Generator
    function generateAgendaView() {
        const agendaContent = document.getElementById('agendaContent');
        const agendaPeriod = document.getElementById('agendaPeriod');
        
        // Clear existing content
        agendaContent.innerHTML = '';
        
        const period = agendaPeriod.value || 'week';
        const startDate = new Date();
        startDate.setHours(0, 0, 0, 0); // Start of today
        let endDate = new Date();
        
        switch (period) {
            case 'week':
                endDate.setDate(startDate.getDate() + 7);
                break;
            case 'month':
                endDate.setDate(startDate.getDate() + 30);
                break;
            case 'quarter':
                endDate.setDate(startDate.getDate() + 90);
                break;
        }
        endDate.setHours(23, 59, 59, 999); // End of the last day
        
        console.log('Agenda view - filtering events from', startDate, 'to', endDate);
        console.log('Available events:', window.googleEvents);
        
        // Filter events for the selected period
        const filteredEvents = window.googleEvents.filter(event => {
            const eventStart = new Date(event.start);
            const eventEnd = new Date(event.end);
            
            // Include events that start or end within the period, or span across it
            const isInPeriod = (eventStart >= startDate && eventStart <= endDate) ||
                              (eventEnd >= startDate && eventEnd <= endDate) ||
                              (eventStart <= startDate && eventEnd >= endDate);
            
            console.log(`Event "${event.title}" (${eventStart} - ${eventEnd}): ${isInPeriod ? 'INCLUDED' : 'EXCLUDED'}`);
            return isInPeriod;
        });
        
        console.log('Filtered events:', filteredEvents);
        
        filteredEvents.forEach(event => {
            console.log(`Agenda event: "${event.title}" - category: "${event.category || 'none/undefined'}"`);
        });
        
        // Group events by date
        const groupedEvents = {};
        filteredEvents.forEach(event => {
            const eventDate = new Date(event.start);
            const dateKey = eventDate.toDateString();
            if (!groupedEvents[dateKey]) {
                groupedEvents[dateKey] = [];
            }
            groupedEvents[dateKey].push(event);
        });
        
        // Sort dates
        const sortedDates = Object.keys(groupedEvents).sort((a, b) => new Date(a) - new Date(b));
        
        if (sortedDates.length === 0) {
            agendaContent.innerHTML = `
                <div class="text-center py-5">
                    <div class="mb-3">
                        <i class="bi bi-calendar-x display-4 text-muted opacity-50"></i>
                    </div>
                    <h6 class="text-muted mb-2">No upcoming events</h6>
                    <p class="text-muted">Add some events to see them here</p>
                    <button type="button" class="btn btn-primary btn-sm mt-2" onclick="window.createEvent();">
                        <i class="bi bi-plus me-1"></i>Add Event
                    </button>
                </div>
            `;
            return;
        }
        
        // Create agenda items
        sortedDates.forEach(dateKey => {
            const dayGroup = document.createElement('div');
            dayGroup.className = 'agenda-day-group';
            
            const dayHeader = document.createElement('div');
            dayHeader.className = 'agenda-day-header';
            const date = new Date(dateKey);
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            dayHeader.innerHTML = `
                <h6 class="mb-0">${date.toLocaleDateString('en-US', options)}</h6>
                <small class="text-muted">${groupedEvents[dateKey].length} event${groupedEvents[dateKey].length > 1 ? 's' : ''}</small>
            `;
            
            dayGroup.appendChild(dayHeader);
            
            // Sort events by time
            groupedEvents[dateKey].sort((a, b) => new Date(a.start) - new Date(b.start));
            
            groupedEvents[dateKey].forEach(event => {
                const agendaEvent = document.createElement('div');
                agendaEvent.className = 'agenda-event';
                agendaEvent.setAttribute('data-event-id', event.id);
                
                // Add category-specific styling using categorizeEvent
                const eventCategory = categorizeEvent(event);
                agendaEvent.classList.add(`agenda-event-${eventCategory}`);
                
                console.log(`Agenda event: "${event.title}" assigned category: "${eventCategory}"`);
                
                // Add priority class if set
                if (event.priority && event.priority !== 'normal') {
                    agendaEvent.classList.add(`agenda-event-priority-${event.priority}`);
                }
                
                const startTime = new Date(event.start);
                const endTime = new Date(event.end);
                const timeString = event.allDay ? 'All Day' : 
                    `${startTime.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })} - ${endTime.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })}`;
                
                // Create category badge with proper colors
                const categoryBadge = eventCategory ? 
                    `<span class="agenda-event-category agenda-category-${eventCategory}">${eventCategory.charAt(0).toUpperCase() + eventCategory.slice(1)}</span>` : '';
                
                agendaEvent.innerHTML = `
                    <div class="agenda-event-time">${timeString}</div>
                    <div class="agenda-event-details">
                        <div class="agenda-event-title">${event.title}</div>
                        <div class="agenda-event-meta">
                            ${event.location ? `<i class="bi bi-geo-alt me-1"></i>${event.location}` : ''}
                            ${categoryBadge}
                            ${event.description ? `<div class="agenda-event-description text-muted mt-1">${event.description}</div>` : ''}
                        </div>
                    </div>
                `;
                
                // Add click handler to show event details
                agendaEvent.addEventListener('click', function() {
                    window.showEventDetails(event);
                });
                
                dayGroup.appendChild(agendaEvent);
            });
            
            agendaContent.appendChild(dayGroup);
        });
        
        // Apply user colors after creating agenda content
        console.log('generateAgendaView: Applying user colors...');
        const userColors = loadUserColors();
        console.log('generateAgendaView: User colors loaded:', userColors);
        applyColors(userColors);
    }

    // Enhanced navigation to support all views
    function updateNavigationButtonText() {
        // This function will be enhanced to support all view modes
    }

    // Enhanced form handlers for recurring events
    function setupEnhancedFormHandlers() {
        // Create event modal recurring checkbox
        const recurringCheckbox = document.getElementById('recurring');
        const recurringOptions = document.getElementById('recurringOptions');
        
        if (recurringCheckbox && recurringOptions) {
            recurringCheckbox.addEventListener('change', function() {
                recurringOptions.style.display = this.checked ? 'flex' : 'none';
            });
        }
        
        // Edit event modal recurring checkbox
        const editRecurringCheckbox = document.getElementById('editRecurring');
        const editRecurringOptions = document.getElementById('editRecurringOptions');
        
        if (editRecurringCheckbox && editRecurringOptions) {
            editRecurringCheckbox.addEventListener('change', function() {
                editRecurringOptions.style.display = this.checked ? 'flex' : 'none';
            });
        }
        
        // Setup drag and drop after DOM is ready
        setTimeout(() => {
            setupDragAndDrop();
        }, 1000);
    }
    
    // Call enhanced form handlers
    setupEnhancedFormHandlers();
    
    // Add day view navigation handlers
    function setupDayNavigation() {
        const prevDayBtn = document.getElementById('prevDay');
        const nextDayBtn = document.getElementById('nextDay');
        
        if (prevDayBtn) {
            prevDayBtn.addEventListener('click', function() {
                currentDayView.setDate(currentDayView.getDate() - 1);
                generateDayView(currentDayView);
                if (googleConnected) {
                    loadGoogleCalendarEvents();
                }
            });
        }
        
        if (nextDayBtn) {
            nextDayBtn.addEventListener('click', function() {
                currentDayView.setDate(currentDayView.getDate() + 1);
                generateDayView(currentDayView);
                if (googleConnected) {
                    loadGoogleCalendarEvents();
                }
            });
        }
    }
    
    setupDayNavigation();

    // Generate initial calendar
    generateCalendar(currentMonth, currentYear);
    
    // Set initial navigation button text for month mode
    updateNavigationButtonText();

    // Google Calendar Integration functionality
    let googleConnected = false;
    window.googleEvents = []; // Make globally accessible

    // Check Google Calendar integration status on page load
    checkGoogleCalendarStatus();

    async function checkGoogleCalendarStatus() {
        try {
            const response = await fetch('/api/google/calendar/status');
            const data = await response.json();
            
            const statusMessage = document.getElementById('calendarStatusMessage');
            
            if (data.connected) {
                googleConnected = true;
                statusMessage.innerHTML = `
                    <i class="bi bi-check-circle-fill text-success me-2"></i>
                    <strong>${window.LanguageManager ? window.LanguageManager.t('calendar.connected') : 'Google Calendar Connected!'}</strong> ${window.LanguageManager ? window.LanguageManager.t('calendar.connectedDescription') : 'Your calendar events are automatically synced.'}
                `;
                statusMessage.parentElement.classList.remove('alert-info', 'alert-warning', 'alert-danger');
                statusMessage.parentElement.classList.add('alert-success');
                
                // Try to load events, but don't show error if it fails here
                try {
                    await loadGoogleCalendarEvents(false); // Don't show notifications on initial load
                } catch (eventError) {
                    console.warn('Initial event loading failed, but status shows connected:', eventError);
                    // Silently fail on initial load - don't show error notification
                }
            } else {
                googleConnected = false;
                statusMessage.innerHTML = `
                    <i class="bi bi-exclamation-triangle-fill text-warning me-2"></i>
                    <strong>${window.LanguageManager ? window.LanguageManager.t('calendar.notConnected') : 'Google Calendar Not Connected'}</strong> - ${window.LanguageManager ? window.LanguageManager.t('calendar.notConnectedDescription') : 'Please log in with Google to enable automatic calendar sync.'}
                `;
                statusMessage.parentElement.classList.remove('alert-info', 'alert-success', 'alert-danger');
                statusMessage.parentElement.classList.add('alert-warning');
            }
        } catch (error) {
            console.error('Error checking Google Calendar status:', error);
            googleConnected = false;
            const statusMessage = document.getElementById('calendarStatusMessage');
            statusMessage.innerHTML = `
                <i class="bi bi-x-circle-fill text-danger me-2"></i>
                <strong>${window.LanguageManager ? window.LanguageManager.t('calendar.connectionError') : 'Connection Error'}</strong> - ${window.LanguageManager ? window.LanguageManager.t('calendar.connectionErrorDescription') : 'Unable to check calendar status. Please refresh the page.'}
            `;
            statusMessage.parentElement.classList.remove('alert-info', 'alert-success', 'alert-warning');
            statusMessage.parentElement.classList.add('alert-danger');
        }
    }

    // Refresh calendar button
    document.getElementById('refreshCalendarBtn').addEventListener('click', async function() {
        const btn = this;
        const originalText = btn.innerHTML;
        
        btn.disabled = true;
        btn.innerHTML = '<i class="bi bi-arrow-clockwise me-2 spinner-border spinner-border-sm"></i>Refreshing...';
        
        try {
            await checkGoogleCalendarStatus();
            showNotification(window.LanguageManager ? window.LanguageManager.t('calendar.calendarRefreshed') : 'Calendar refreshed successfully!', 'success');
        } catch (error) {
            showNotification(window.LanguageManager ? window.LanguageManager.t('calendar.calendarRefreshError') : 'Failed to refresh calendar', 'error');
        } finally {
            btn.disabled = false;
            btn.innerHTML = originalText;
        }
    });

    async function loadGoogleCalendarEvents(showErrorNotifications = true) {
        if (!googleConnected) return;

        try {
            let startDate, endDate, periodDescription;
            
            if (currentViewMode === 'month') {
                startDate = new Date(currentYear, currentMonth, 1).toISOString();
                endDate = new Date(currentYear, currentMonth + 1, 0).toISOString();
                const translatedMonthNames = getMonthNames();
                periodDescription = `${translatedMonthNames[currentMonth]} ${currentYear}`;
            } else {
                // Week view
                startDate = new Date(currentWeekStart).toISOString();
                const weekEnd = new Date(currentWeekStart);
                weekEnd.setDate(currentWeekStart.getDate() + 6);
                endDate = weekEnd.toISOString();
                
                const translatedMonthNames = getMonthNames();
                const startMonth = translatedMonthNames[currentWeekStart.getMonth()];
                const endMonth = translatedMonthNames[weekEnd.getMonth()];
                
                if (currentWeekStart.getMonth() === weekEnd.getMonth()) {
                    periodDescription = `${startMonth} ${currentWeekStart.getDate()}-${weekEnd.getDate()}, ${currentWeekStart.getFullYear()}`;
                } else {
                    periodDescription = `${startMonth} ${currentWeekStart.getDate()} - ${endMonth} ${weekEnd.getDate()}, ${currentWeekStart.getFullYear()}`;
                }
            }
            
            console.log('📅 Loading events for:', periodDescription);
            console.log('📅 Date range:', startDate, 'to', endDate);
            
            const response = await fetch(`/api/google/calendar/events?start=${startDate}&end=${endDate}`);
            const data = await response.json();
            
            console.log('📊 API Response:', data);
            
            if (data.success) {
                window.googleEvents = data.events || [];
                console.log(`🎉 Loaded ${window.googleEvents.length} events:`, window.googleEvents);
                updateCalendarWithEvents();
                updateEventCount();
                
                // Show user feedback only if requested
                if (showErrorNotifications) {
                    if (window.googleEvents.length === 0) {
                        const message = window.LanguageManager 
                            ? window.LanguageManager.t('calendar.noEventsForMonth').replace('{month}', periodDescription).replace('{year}', '')
                            : `No events found for ${periodDescription}`;
                        showNotification(message, 'info');
                    } else {
                        const message = window.LanguageManager 
                            ? window.LanguageManager.t('calendar.eventsLoaded').replace('{count}', window.googleEvents.length).replace('{month}', periodDescription)
                            : `Loaded ${window.googleEvents.length} event(s) for ${periodDescription}`;
                        showNotification(message, 'success');
                    }
                }
            } else {
                console.error('❌ API Error:', data);
                if (showErrorNotifications) {
                    showNotification(window.LanguageManager ? window.LanguageManager.t('calendar.failedToLoadEvents') : 'Failed to load calendar events', 'error');
                }
            }
        } catch (error) {
            console.error('❌ Error loading Google Calendar events:', error);
            if (showErrorNotifications) {
                showNotification(window.LanguageManager ? window.LanguageManager.t('calendar.failedToLoadEvents') : 'Failed to load Google Calendar events', 'error');
            }
        }
    }

    function updateCalendarWithEvents() {
        console.log('🎨 Updating calendar with events:', window.googleEvents);
        
        // Clear existing event indicators
        document.querySelectorAll('.event-title, .event-count-badge, .week-event').forEach(el => el.remove());
        
        if (!window.googleEvents || window.googleEvents.length === 0) {
            console.log('📭 No events to display');
            return;
        }
        
        // Apply user colors to ensure events get correct styling
        const userColors = loadUserColors();
        applyColors(userColors);
        
        let eventsAdded = 0;
        window.googleEvents.forEach((event, index) => {
            console.log(`📅 Processing event ${index + 1}:`, event);
            
            const eventStart = new Date(event.start);
            const eventEnd = new Date(event.end);
            console.log(`📅 Event: ${event.title}, Start: ${eventStart}, End: ${eventEnd}, View mode: ${currentViewMode}`);
            
            if (currentViewMode === 'month') {
                // Month view - show events for current month
                const shouldShowEvent = eventStart.getMonth() === currentMonth && eventStart.getFullYear() === currentYear;
                
                if (shouldShowEvent) {
                    const dayCell = findDayCell(eventStart);
                    if (dayCell && !(dayCell.classList && dayCell.classList.contains('empty-cell'))) {
                        addEventIndicator(dayCell, event, eventStart.getMonth(), eventStart.getFullYear());
                        eventsAdded++;
                        console.log(`✅ Added event indicator for: ${event.title}`);
                    }
                }
            } else if (currentViewMode === 'day') {
                // Day view - regenerate the day view with current events
                generateDayView(currentDayView);
                return; // Exit early since generateDayView handles all events for the day
            } else if (currentViewMode === 'agenda') {
                // Agenda view - regenerate the agenda view with current events
                generateAgendaView();
                return; // Exit early since generateAgendaView handles events
            } else {
                // Week view - handle multi-day events properly
                const weekEnd = new Date(currentWeekStart);
                weekEnd.setDate(currentWeekStart.getDate() + 6);
                
                // Check if event overlaps with current week
                const eventStartDate = new Date(eventStart.getFullYear(), eventStart.getMonth(), eventStart.getDate());
                const eventEndDate = new Date(eventEnd.getFullYear(), eventEnd.getMonth(), eventEnd.getDate());
                
                const weekStartDate = new Date(currentWeekStart.getFullYear(), currentWeekStart.getMonth(), currentWeekStart.getDate());
                const weekEndDate = new Date(weekEnd.getFullYear(), weekEnd.getMonth(), weekEnd.getDate());
                
                if (eventStartDate <= weekEndDate && eventEndDate >= weekStartDate) {
                    // Event overlaps with the current week
                    
                    // Calculate which days in the week this event should appear on
                    const displayStartDate = new Date(Math.max(eventStartDate.getTime(), weekStartDate.getTime()));
                    const displayEndDate = new Date(Math.min(eventEndDate.getTime(), weekEndDate.getTime()));
                    
                    // Create event indicators for each day the event spans in this week
                    const currentDate = new Date(displayStartDate);
                    while (currentDate <= displayEndDate) {
                        const dayCell = findDayCell(currentDate);
                        console.log(`📅 Checking day cell for ${currentDate.toDateString()}:`, dayCell ? 'Found' : 'Not found');
                        
                        if (dayCell) {
                            // For multi-day events, mark which day of the span this is
                            const isFirstDay = currentDate.getTime() === eventStartDate.getTime();
                            const isLastDay = currentDate.getTime() === eventEndDate.getTime();
                            const dayOfSpan = Math.floor((currentDate - eventStartDate) / (1000 * 60 * 60 * 24)) + 1;
                            const totalDays = Math.floor((eventEndDate - eventStartDate) / (1000 * 60 * 60 * 24)) + 1;
                            
                            // Add metadata for multi-day rendering
                            const eventWithSpanInfo = {
                                ...event,
                                isFirstDay,
                                isLastDay,
                                dayOfSpan,
                                totalDays,
                                spanStartDate: eventStartDate,
                                spanEndDate: eventEndDate
                            };
                            
                            addEventIndicator(dayCell, eventWithSpanInfo, currentDate.getMonth(), currentDate.getFullYear());
                            eventsAdded++;
                            console.log(`✅ Added event indicator for: ${event.title} (day ${dayOfSpan}/${totalDays})`);
                        }
                        
                        // Move to next day
                        currentDate.setDate(currentDate.getDate() + 1);
                    }
                }
            }
        });
        
        console.log(`🎉 Added ${eventsAdded} event indicators to calendar`);
    }

    function findDayCell(eventDate) {
        const cells = document.querySelectorAll('.calendar-day');
        
        if (currentViewMode === 'month') {
            // Month view - find by day number
            const day = eventDate.getDate();
            for (let cell of cells) {
                const dayElement = cell.querySelector('.day-number');
                if (dayElement && parseInt(dayElement.textContent) === day && !cell.classList.contains('empty-cell')) {
                    return cell;
                }
            }
        } else {
            // Week view with time slots - find by date and return the container for that day
            const targetDateStr = eventDate.toISOString().split('T')[0];
            
            // For week view, we need to find all cells for this date and return a container
            const dayCells = Array.from(cells).filter(cell => 
                cell.getAttribute('data-date') === targetDateStr && !cell.classList.contains('all-day-cell')
            );
            
            if (dayCells.length > 0) {
                // Return a virtual container that represents this day column
                return {
                    isWeekColumn: true,
                    date: eventDate,
                    cells: dayCells,
                    getAttribute: () => targetDateStr
                };
            }
        }
        return null;
    }

    function addEventIndicator(dayContainer, event, month, year) {
        if (currentViewMode === 'month') {
            // Month view logic with multi-day event support
            const eventStart = new Date(event.start);
            const eventEnd = new Date(event.end);
            
            // Calculate event duration in days
            const startDate = new Date(eventStart.getFullYear(), eventStart.getMonth(), eventStart.getDate());
            const endDate = new Date(eventEnd.getFullYear(), eventEnd.getMonth(), eventEnd.getDate());
            const durationDays = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)) + 1;
            
            console.log(`📅 Event "${event.title}" duration: ${durationDays} days`);
            
            if (durationDays > 1) {
                // Multi-day event - span across multiple cells
                addMultiDayEvent(event, eventStart, eventEnd, month, year);
            } else {
                // Single day event - use existing logic
                const cell = dayContainer;
                const existingEvents = cell.querySelectorAll('.event-title');
                const maxEventsToShow = 3;
                
                if (existingEvents.length < maxEventsToShow) {
                    const eventTitle = document.createElement('div');
                    eventTitle.className = 'event-title';
                    
                    const eventType = categorizeEvent(event);
                    eventTitle.classList.add(`event-${eventType}`);
                    eventTitle.textContent = event.title;
                    eventTitle.title = `${event.title} (${eventType})\nClick: View event details`;
                    
                    eventTitle.style.width = '100%';
                    eventTitle.style.maxWidth = '100%';
                    eventTitle.style.pointerEvents = 'auto';
                    eventTitle.style.position = 'relative';
                    eventTitle.style.zIndex = '2';
                    eventTitle.style.display = 'block';
                    eventTitle.style.cursor = 'pointer';
                    
                    eventTitle.addEventListener('click', function(e) {
                        e.stopPropagation();
                        console.log('Event title clicked:', event.title);
                        showEventDetails(event);
                    });
                    
                    cell.appendChild(eventTitle);
                }
            }
        } else {
            // Week view with time positioning
            if (!dayContainer || !dayContainer.isWeekColumn) {
                console.log('❌ Invalid day container for week view:', dayContainer);
                return;
            }
            
            const eventStart = new Date(event.start);
            const eventEnd = new Date(event.end);
            
            // Handle all-day events
            if (event.allDay) {
                // Find the all-day cell for this date
                const targetDateStr = dayContainer.date.toISOString().split('T')[0];
                const allDayCell = document.querySelector(`td.all-day-cell[data-date="${targetDateStr}"]`);
                
                if (allDayCell) {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'week-event all-day-event position-relative';
                    
                    const eventType = categorizeEvent(event);
                    eventElement.classList.add(`event-${eventType}`);
                    
                    // Check if this is part of a multi-day event
                    const isMultiDay = event.totalDays && event.totalDays > 1;
                    let eventTitle = event.title;
                    
                    if (isMultiDay) {
                        eventElement.classList.add('multi-day-event');
                        
                        // Add visual indicators for multi-day events
                        if (event.isFirstDay && !event.isLastDay) {
                            eventTitle = `${event.title} →`;
                            eventElement.style.borderTopRightRadius = '0';
                            eventElement.style.borderBottomRightRadius = '0';
                        } else if (!event.isFirstDay && event.isLastDay) {
                            eventTitle = `← ${event.title}`;
                            eventElement.style.borderTopLeftRadius = '0';
                            eventElement.style.borderBottomLeftRadius = '0';
                        } else if (!event.isFirstDay && !event.isLastDay) {
                            eventTitle = `← ${event.title} →`;
                            eventElement.style.borderRadius = '0';
                        }
                        
                        // Add day indicator for multi-day events
                        if (event.totalDays > 2) {
                            eventTitle += ` (${event.dayOfSpan}/${event.totalDays})`;
                        }
                    }
                    
                    eventElement.style.width = '100%';
                    eventElement.style.height = '16px';
                    eventElement.style.backgroundColor = 'rgba(var(--bs-info-rgb), 0.8)';
                    eventElement.style.border = '1px solid rgba(var(--bs-info-rgb), 1)';
                    eventElement.style.borderRadius = isMultiDay ? eventElement.style.borderRadius || '2px' : '2px';
                    eventElement.style.padding = '1px 3px';
                    eventElement.style.fontSize = '0.55rem';
                    eventElement.style.color = 'white';
                    eventElement.style.overflow = 'hidden';
                    eventElement.style.cursor = 'pointer';
                    eventElement.style.marginBottom = '1px';
                    eventElement.style.textAlign = 'center';
                    eventElement.style.lineHeight = '14px';
                    
                    eventElement.innerHTML = `<div style="font-weight: bold; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${eventTitle}</div>`;
                    eventElement.title = `${event.title} (All Day)${isMultiDay ? ` - Day ${event.dayOfSpan} of ${event.totalDays}` : ''}\nClick: View event details`;
                    
                    // Click handler
                    eventElement.addEventListener('click', function(e) {
                        e.stopPropagation();
                        console.log('All-day event clicked:', event.title);
                        showEventDetails(event);
                    });
                    
                    // Apply user-selected colors
                    const userColors = loadUserColors();
                    if (userColors[eventType]) {
                        eventElement.style.backgroundColor = userColors[eventType];
                        eventElement.style.borderColor = userColors[eventType];
                    }
                    
                    allDayCell.appendChild(eventElement);
                    console.log(`✅ Added all-day event indicator for: ${event.title}`);
                }
                return; // Early return for all-day events
            }
            
            // Handle timed events
            const startHour = eventStart.getHours();
            const endHour = eventEnd.getHours();
            const startMinutes = eventStart.getMinutes();
            const endMinutes = eventEnd.getMinutes();
            const durationInHours = (eventEnd - eventStart) / (1000 * 60 * 60);
            
            console.log(`📍 Event spans from ${startHour}:${startMinutes.toString().padStart(2, '0')} to ${endHour}:${endMinutes.toString().padStart(2, '0')} (${durationInHours.toFixed(2)} hours)`);
            
            // Find the starting time slot cell
            const startCell = dayContainer.cells.find(cell => {
                const cellHour = parseInt(cell.getAttribute('data-hour'));
                return cellHour === startHour;
            });
            
            if (startCell) {
                // Enhanced multi-hour event handling
                const cellsToSpan = [];
                const eventDurationHours = Math.ceil(durationInHours);
                
                // Collect all cells this event should span
                for (let hour = startHour; hour < startHour + eventDurationHours && hour <= 23; hour++) {
                    const cell = dayContainer.cells.find(cell => 
                        parseInt(cell.getAttribute('data-hour')) === hour
                    );
                    if (cell) cellsToSpan.push(cell);
                }
                
                console.log(`📍 Event will span ${cellsToSpan.length} cells for ${eventDurationHours} hours duration`);
                
                if (cellsToSpan.length > 0) {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'week-event position-absolute multi-hour-event';
                    
                    const eventType = categorizeEvent(event);
                    eventElement.classList.add(`event-${eventType}`);
                    
                    // Check if this is part of a multi-day event
                    const isMultiDay = event.totalDays && event.totalDays > 1;
                    if (isMultiDay) {
                        eventElement.classList.add('multi-day-event');
                    }
                    
                    // Enhanced positioning for multi-hour events
                    const topOffset = (startMinutes / 60) * 40; // 40px per hour
                    
                    // Calculate height to span across multiple time slots
                    let eventHeight;
                    if (durationInHours <= 1) {
                        // Short event - fit within time slots
                        const totalMinutes = (eventEnd - eventStart) / (1000 * 60);
                        eventHeight = Math.max((totalMinutes / 60) * 40, 8); // Reduced minimum to 8px height
                    } else {
                        // Multi-hour event - span across cells with better visual continuity
                        const cellHeight = 40; // Height per hour cell
                        const totalHeight = cellsToSpan.length * cellHeight;
                        const endOffset = (endMinutes / 60) * cellHeight;
                        
                        // Calculate exact height from start to end time
                        eventHeight = totalHeight - topOffset - (cellHeight - endOffset);
                        eventHeight = Math.max(eventHeight, 10); // Reduced minimum height for visibility
                    }
                    
                    // Position relative to the first cell
                    eventElement.style.top = `${topOffset}px`;
                    eventElement.style.left = '3px';
                    eventElement.style.right = '3px';
                    eventElement.style.height = `${eventHeight}px`;
                    eventElement.style.backgroundColor = 'rgba(var(--bs-primary-rgb), 0.9)';
                    eventElement.style.border = '1px solid rgba(var(--bs-primary-rgb), 1)';
                    
                    // Apply multi-day border styling
                    if (isMultiDay) {
                        if (event.isFirstDay && !event.isLastDay) {
                            eventElement.style.borderTopRightRadius = '0';
                            eventElement.style.borderBottomRightRadius = '0';
                        } else if (!event.isFirstDay && event.isLastDay) {
                            eventElement.style.borderTopLeftRadius = '0';
                            eventElement.style.borderBottomLeftRadius = '0';
                        } else if (!event.isFirstDay && !event.isLastDay) {
                            eventElement.style.borderRadius = '0';
                        } else {
                            eventElement.style.borderRadius = '4px';
                        }
                    } else {
                        eventElement.style.borderRadius = '4px';
                    }
                    
                    eventElement.style.padding = '1px 3px';
                    eventElement.style.fontSize = eventHeight > 20 ? '0.6rem' : '0.5rem';
                    eventElement.style.color = 'white';
                    eventElement.style.overflow = 'hidden';
                    eventElement.style.zIndex = '5';
                    eventElement.style.cursor = 'pointer';
                    eventElement.style.boxShadow = '0 2px 4px rgba(0,0,0,0.25)';
                    eventElement.style.lineHeight = '1.2';
                    eventElement.style.fontWeight = 'bold';
                    
                    // Enhanced content based on event height and multi-day status
                    const startTimeText = `${eventStart.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
                    const endTimeText = `${eventEnd.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
                    
                    // Prepare title with multi-day indicators
                    let displayTitle = event.title;
                    if (isMultiDay) {
                        if (event.isFirstDay && !event.isLastDay) {
                            displayTitle = `${event.title} →`;
                        } else if (!event.isFirstDay && event.isLastDay) {
                            displayTitle = `← ${event.title}`;
                        } else if (!event.isFirstDay && !event.isLastDay) {
                            displayTitle = `← ${event.title} →`;
                        }
                    }
                    
                    if (eventHeight > 25) {
                        // Large event - show full details with multi-day info
                        let timeDisplay = `${startTimeText} - ${endTimeText}`;
                        if (isMultiDay && event.totalDays > 2) {
                            timeDisplay += ` (Day ${event.dayOfSpan}/${event.totalDays})`;
                        }
                        eventElement.innerHTML = `
                            <div style="font-weight: bold; line-height: 1.1; margin-bottom: 1px;">${displayTitle}</div>
                            <div style="font-size: 0.45rem; opacity: 0.9; line-height: 1;">${timeDisplay}</div>
                        `;
                    } else if (eventHeight > 15) {
                        // Medium event - show title and start time
                        let timeDisplay = startTimeText;
                        if (isMultiDay && event.totalDays <= 3) {
                            timeDisplay += ` (${event.dayOfSpan}/${event.totalDays})`;
                        }
                        eventElement.innerHTML = `
                            <div style="font-weight: bold; line-height: 1.1;">${displayTitle}</div>
                            <div style="font-size: 0.4rem; opacity: 0.8;">${timeDisplay}</div>
                        `;
                    } else {
                        // Small event - show only title with minimal multi-day indicator
                        eventElement.innerHTML = `<div style="font-weight: bold; line-height: 1; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">${displayTitle}</div>`;
                    }
                    
                    // Enhanced tooltip with multi-day information
                    let tooltipText = `${event.title}\n${startTimeText} - ${endTimeText}\nDuration: ${durationInHours.toFixed(1)} hours`;
                    if (isMultiDay) {
                        tooltipText += `\nMulti-day event: Day ${event.dayOfSpan} of ${event.totalDays}`;
                    }
                    tooltipText += '\nClick: View event details';
                    eventElement.title = tooltipText;
                    
                    // Click handler
                    eventElement.addEventListener('click', function(e) {
                        e.stopPropagation();
                        console.log('Multi-hour event clicked:', event.title);
                        showEventDetails(event);
                    });
                    
                    // Add hover effect for better interactivity
                    eventElement.addEventListener('mouseenter', function() {
                        this.style.transform = 'scale(1.02)';
                        this.style.zIndex = '6';
                        this.style.boxShadow = '0 3px 8px rgba(0,0,0,0.35)';
                    });
                    eventElement.addEventListener('mouseleave', function() {
                        this.style.transform = 'scale(1)';
                        this.style.zIndex = '5';
                        this.style.boxShadow = '0 2px 4px rgba(0,0,0,0.25)';
                    });
                    
                    // Apply user-selected colors
                    const userColors = loadUserColors();
                    if (userColors[eventType]) {
                        eventElement.style.backgroundColor = userColors[eventType];
                        eventElement.style.borderColor = userColors[eventType];
                    }
                    
                    // Add to the first cell in the span
                    startCell.appendChild(eventElement);
                    console.log(`✅ Added enhanced multi-hour event: ${event.title} (${durationInHours.toFixed(1)}h, ${eventHeight}px height)`);
                } else {
                    console.log(`❌ No cells found to span for event: ${event.title}`);
                }
            } else {
                console.log(`❌ No start cell found for hour ${startHour} in week view`);
            }
        }
    }

    // Function to handle multi-day events in month view
    function addMultiDayEvent(event, eventStart, eventEnd, month, year) {
        console.log(`📅 Adding multi-day event: ${event.title} from ${eventStart.toDateString()} to ${eventEnd.toDateString()}`);
        
        const startDate = new Date(eventStart.getFullYear(), eventStart.getMonth(), eventStart.getDate());
        const endDate = new Date(eventEnd.getFullYear(), eventEnd.getMonth(), eventEnd.getDate());
        
        // Find all calendar cells for this event's date range
        const calendarCells = document.querySelectorAll('.calendar-day');
        const eventCells = [];
        
        for (let cell of calendarCells) {
            const dayNumber = cell.querySelector('.day-number');
            if (!dayNumber || cell.classList.contains('empty-cell')) continue;
            
            const cellDay = parseInt(dayNumber.textContent);
            const cellDate = new Date(year, month, cellDay);
            
            // Check if this cell's date falls within the event range
            if (cellDate >= startDate && cellDate <= endDate) {
                eventCells.push({ cell, date: cellDate, day: cellDay });
            }
        }
        
        console.log(`📅 Found ${eventCells.length} cells for multi-day event`);
        
        if (eventCells.length > 0) {
            // Sort cells by date to ensure proper order
            eventCells.sort((a, b) => a.date - b.date);
            
            const eventType = categorizeEvent(event);
            
            // Create the event bar that spans across days
            eventCells.forEach((cellInfo, index) => {
                const { cell, date, day } = cellInfo;
                const isFirst = index === 0;
                const isLast = index === eventCells.length - 1;
                
                // Check if we should show this part of the event (don't show on empty cells)
                const existingEvents = cell.querySelectorAll('.event-title, .multi-day-event');
                const maxEventsToShow = 3;
                
                if (existingEvents.length < maxEventsToShow) {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'event-title multi-day-event';
                    eventElement.classList.add(`event-${eventType}`);
                    
                    // Style the event differently based on position
                    if (isFirst && isLast) {
                        // Single cell (shouldn't happen for multi-day, but just in case)
                        eventElement.textContent = event.title;
                        eventElement.style.borderRadius = '4px';
                    } else if (isFirst) {
                        // First cell - show title and rounded left
                        eventElement.textContent = event.title;
                        eventElement.style.borderRadius = '4px 0 0 4px';
                        eventElement.style.position = 'relative';
                        
                        // Add continuation indicator
                        const continueArrow = document.createElement('span');
                        continueArrow.innerHTML = ' →';
                        continueArrow.style.position = 'absolute';
                        continueArrow.style.right = '2px';
                        continueArrow.style.top = '0';
                        continueArrow.style.opacity = '0.8';
                        eventElement.appendChild(continueArrow);
                    } else if (isLast) {
                        // Last cell - show continuation and rounded right
                        eventElement.textContent = `← ${event.title}`;
                        eventElement.style.borderRadius = '0 4px 4px 0';
                    } else {
                        // Middle cell - show continuation
                        eventElement.textContent = `← ${event.title} →`;
                        eventElement.style.borderRadius = '0';
                    }
                    
                    // Common styling
                    eventElement.title = `${event.title} (${eventType}) - Multi-day event\nClick: View event details`;
                    eventElement.style.width = '100%';
                    eventElement.style.maxWidth = '100%';
                    eventElement.style.pointerEvents = 'auto';
                    eventElement.style.position = 'relative';
                    eventElement.style.zIndex = '3';
                    eventElement.style.display = 'block';
                    eventElement.style.cursor = 'pointer';
                    eventElement.style.fontSize = '0.6rem';
                    eventElement.style.fontWeight = 'bold';
                    eventElement.style.overflow = 'hidden';
                    eventElement.style.whiteSpace = 'nowrap';
                    eventElement.style.textOverflow = 'ellipsis';
                    
                    // Add distinctive styling for multi-day events
                    eventElement.style.border = '2px solid rgba(255,255,255,0.3)';
                    eventElement.style.boxShadow = '0 1px 3px rgba(0,0,0,0.2)';
                    
                    eventElement.addEventListener('click', function(e) {
                        e.stopPropagation();
                        console.log('Multi-day event clicked:', event.title);
                        showEventDetails(event);
                    });
                    
                    cell.appendChild(eventElement);
                }
            });
            
            console.log(`✅ Added multi-day event spanning ${eventCells.length} cells`);
        }
    }

    function updateEventCount() {
        const eventCountElement = document.querySelector('.col-6 .h5');
        if (eventCountElement) {
            const currentMonthEvents = window.googleEvents.filter(event => {
                const eventDate = new Date(event.start);
                return eventDate.getMonth() === currentMonth && eventDate.getFullYear() === currentYear;
            });
            eventCountElement.textContent = currentMonthEvents.length;
        }
        
        // Update upcoming events display
        updateUpcomingEventsList();
    }

    function updateUpcomingEventsList() {
        const eventsContainer = document.getElementById('upcomingEventsContainer');
        const noEventsMessage = document.getElementById('noEventsMessage');
        const eventsList = document.getElementById('eventsList');
        const eventCountBadge = document.querySelector('.card-header .badge');
        
        if (!window.googleEvents || window.googleEvents.length === 0) {
            noEventsMessage.style.display = 'block';
            eventsList.style.display = 'none';
            if (eventCountBadge) eventCountBadge.textContent = `0 ${window.LanguageManager ? window.LanguageManager.t('calendar.events') : 'events'}`;
            return;
        }
        
        // Get upcoming events (next 7 days)
        const now = new Date();
        const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
        
        const upcomingEvents = window.googleEvents
            .filter(event => {
                const eventDate = new Date(event.start);
                return eventDate >= now && eventDate <= nextWeek;
            })
            .sort((a, b) => new Date(a.start) - new Date(b.start))
            .slice(0, 5); // Show max 5 events
        
        if (upcomingEvents.length === 0) {
            noEventsMessage.style.display = 'block';
            eventsList.style.display = 'none';
            if (eventCountBadge) eventCountBadge.textContent = `0 ${window.LanguageManager ? window.LanguageManager.t('calendar.upcoming') : 'upcoming'}`;
        } else {
            noEventsMessage.style.display = 'none';
            eventsList.style.display = 'block';
            if (eventCountBadge) eventCountBadge.textContent = `${upcomingEvents.length} ${window.LanguageManager ? window.LanguageManager.t('calendar.upcoming') : 'upcoming'}`;
            
            // Generate events HTML with enhanced styling
            eventsList.innerHTML = upcomingEvents.map(event => {
                const eventDate = new Date(event.start);
                const isToday = eventDate.toDateString() === now.toDateString();
                const isTomorrow = eventDate.toDateString() === new Date(now.getTime() + 24 * 60 * 60 * 1000).toDateString();
                
                let dateDisplay = eventDate.toLocaleDateString();
                if (isToday) dateDisplay = window.LanguageManager ? window.LanguageManager.t('calendar.today') : 'Today';
                else if (isTomorrow) dateDisplay = window.LanguageManager ? window.LanguageManager.t('calendar.tomorrow') : 'Tomorrow';
                
                let timeDisplay = '';
                if (!event.allDay) {
                    const endTime = new Date(event.end);
                    timeDisplay = `${eventDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - ${endTime.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
                } else {
                    timeDisplay = window.LanguageManager ? window.LanguageManager.t('calendar.allDay') : 'All day';
                }
                
                // Get event category for styling - use user-selected colors
                const eventType = categorizeEvent(event);
                const userColors = loadUserColors();
                const categoryColors = {
                    work: { bg: userColors.work, text: 'Work' },
                    meeting: { bg: userColors.meeting, text: 'Meeting' },
                    personal: { bg: userColors.personal, text: 'Personal' },
                    reminder: { bg: userColors.reminder, text: 'Reminder' }
                };
                const categoryStyle = categoryColors[eventType] || categoryColors.work;
                
                return `
                    <div class="event-item mb-3 p-3 border rounded cursor-pointer" onclick="showEventDetails(${JSON.stringify(event).replace(/"/g, '&quot;')})">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-2">
                                    <h6 class="mb-0 text-primary me-2">${event.title}</h6>
                                    <span class="badge text-white" style="background-color: ${categoryStyle.bg};">${categoryStyle.text}</span>
                                </div>
                                <small class="text-muted d-block">
                                    <i class="bi bi-calendar me-1"></i>${dateDisplay}
                                </small>
                                <small class="text-muted d-block">
                                    <i class="bi bi-clock me-1"></i>${timeDisplay}
                                </small>
                                ${event.location ? `<small class="text-muted d-block"><i class="bi bi-geo-alt me-1"></i>${event.location}</small>` : ''}
                            </div>
                            <div class="text-end">
                                <span class="badge bg-dark">${window.LanguageManager ? window.LanguageManager.t('calendar.googleCalendar') : 'Google Calendar'}</span>
                            </div>
                        </div>
                        ${event.description ? `<div class="mt-2"><small class="text-muted">${event.description.substring(0, 100)}${event.description.length > 100 ? '...' : ''}</small></div>` : ''}
                    </div>
                `;
            }).join('');
        }
    }

    // Original functions moved to global scope at end of file - see window.createEvent, etc.
    
    // Make functions available globally first
    // (moved outside DOMContentLoaded - functions defined at bottom of file)
    
    // Form handling for all-day toggle
    function initializeFormHandlers() {
        // Handle create event modal all-day toggle
        const allDayCheckbox = document.getElementById('allDay');
        const timeFields = document.querySelectorAll('#startTime, #endTime');
        const timeLabels = document.querySelectorAll('label[for="startTime"], label[for="endTime"]');
        
        if (allDayCheckbox) {
            allDayCheckbox.addEventListener('change', function() {
                timeFields.forEach(field => {
                    field.style.display = this.checked ? 'none' : 'block';
                    field.required = !this.checked;
                });
                timeLabels.forEach(label => {
                    label.style.display = this.checked ? 'none' : 'block';
                });
            });
        }
        
        // Handle edit event modal all-day toggle
        const editAllDayCheckbox = document.getElementById('editAllDay');
        const editTimeFields = document.querySelectorAll('#editStartTime, #editEndTime');
        const editTimeLabels = document.querySelectorAll('label[for="editStartTime"], label[for="editEndTime"]');
        
        if (editAllDayCheckbox) {
            editAllDayCheckbox.addEventListener('change', function() {
                editTimeFields.forEach(field => {
                    field.style.display = this.checked ? 'none' : 'block';
                    field.required = !this.checked;
                });
                editTimeLabels.forEach(label => {
                    label.style.display = this.checked ? 'none' : 'block';
                });
            });
        }
        
        // Set default dates to today
        const today = new Date().toISOString().split('T')[0];
        const startDateField = document.getElementById('startDate');
        const endDateField = document.getElementById('endDate');
        
        if (startDateField && !startDateField.value) {
            startDateField.value = today;
        }
        if (endDateField && !endDateField.value) {
            endDateField.value = today;
        }
        
        // Set default times
        const now = new Date();
        const currentTime = now.toTimeString().slice(0, 5);
        const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000).toTimeString().slice(0, 5);
        
        const startTimeField = document.getElementById('startTime');
        const endTimeField = document.getElementById('endTime');
        
        if (startTimeField && !startTimeField.value) {
            startTimeField.value = currentTime;
        }
        if (endTimeField && !endTimeField.value) {
            endTimeField.value = oneHourLater;
        }
    }

    // Helper function for displaying alerts
    function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer');
        const alertId = 'alert-' + Date.now();
        
        const alertHTML = `
            <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        alertContainer.innerHTML = alertHTML;
        
        // Auto-dismiss after 10 seconds (longer for error messages with buttons)
        setTimeout(() => {
            const alertElement = document.getElementById(alertId);
            if (alertElement) {
                const alert = new bootstrap.Alert(alertElement);
                alert.close();
            }
        }, type === 'danger' ? 10000 : 5000);
    }
    
    // Assign functions to global scope for access by window functions
    window.showAlert = showAlert;
    window.loadGoogleCalendarEvents = loadGoogleCalendarEvents;
    window.currentEventForEdit = currentEventForEdit;

    // Initialize form handlers
    initializeFormHandlers();
    
    // Initialize color settings
    setTimeout(() => {
        initializeColorSettings();
        // Apply colors immediately on page load
        const userColors = loadUserColors();
        applyColors(userColors);
    }, 100);

    function showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        const alertType = type === 'error' ? 'danger' : type;
        notification.className = `alert alert-${alertType} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 1050; min-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // Auto remove after 5 seconds
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }

    // Auto-refresh calendar events every 5 minutes if connected
    setInterval(() => {
        if (googleConnected) {
            loadGoogleCalendarEvents();
        }
    }, 5 * 60 * 1000); // 5 minutes
    
    // Function to re-authorize calendar with write permissions
    function reauthorizeCalendar() {
        // Redirect to public site Google OAuth to get updated permissions
        window.location.href = 'http://localhost:3000/auth/google';
    }
    
    // Function to check if user has write permissions and show notice if needed
    function checkWritePermissions() {
        // We'll show the reauthorize notice if users get permission errors
        // This will be triggered when they try to create/edit events
        const notice = document.getElementById('reauthorizeNotice');
        if (notice) {
            notice.style.display = 'block';
        }
    }
    
    // Make showNotification globally available
    window.showNotification = showNotification;
    
    // Listen for language changes and update calendar
    document.addEventListener('languageChanged', function(e) {
        console.log('Language changed to:', e.detail.language);
        // Regenerate calendar with new month names
        generateCalendar(currentMonth, currentYear);
        // Update any dynamic content
        if (googleConnected) {
            loadGoogleCalendarEvents();
        }
    });
});

// Day Details Modal Functions - Global scope
let selectedDay = null;
let selectedMonth = null;
let selectedYear = null;

function showDayDetails(day, month, year) {
    selectedDay = day;
    selectedMonth = month;
    selectedYear = year;
    
    const selectedDate = new Date(year, month, day);
    const dateString = selectedDate.toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    });
    
    // Update modal title and date display
    document.getElementById('dayDetailsTitle').textContent = `Events - ${selectedDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;
    document.getElementById('selectedDateDisplay').textContent = dateString;
    
    // Get events for this day from global googleEvents variable
    const dayEvents = window.googleEvents ? window.googleEvents.filter(event => {
        const eventDate = new Date(event.start);
        return eventDate.getDate() === day && 
               eventDate.getMonth() === month && 
               eventDate.getFullYear() === year;
    }) : [];
    
    // Populate events list
    populateDayEventsList(dayEvents);
    
    // Show modal
    const modal = new bootstrap.Modal(document.getElementById('dayDetailsModal'));
    modal.show();
}

// Make showDayDetails available globally immediately
window.showDayDetails = showDayDetails;

// Categorize events based on user selection or title and description - Global scope
function categorizeEvent(event) {
    // If event has a manually selected category, use that
    if (event.category && ['work', 'meeting', 'personal', 'reminder'].includes(event.category)) {
        return event.category;
    }
    
    // Check local storage for category override (fallback if backend doesn't support categories)
    if (event.id) {
        const localCategory = getEventCategory(event.id);
        if (localCategory && ['work', 'meeting', 'personal', 'reminder'].includes(localCategory)) {
            return localCategory;
        }
    }
    
    // Otherwise, auto-categorize based on title and description
    const title = event.title ? event.title.toLowerCase() : '';
    const description = event.description ? event.description.toLowerCase() : '';
    const combined = title + ' ' + description;
    
    // Work-related keywords
    if (combined.match(/meeting|call|conference|standup|review|project|work|office|client|deadline|presentation|interview/)) {
        return 'work';
    }
    
    // Meeting-specific keywords (more specific than work)
    if (combined.match(/meet|zoom|teams|skype|video call|conference call|discussion|appointment/)) {
        return 'meeting';
    }
    
    // Personal keywords
    if (combined.match(/personal|family|doctor|dentist|appointment|vacation|holiday|birthday|anniversary|dinner|lunch|gym|workout|private/)) {
        return 'personal';
    }
    
    // Reminder keywords
    if (combined.match(/reminder|remember|don't forget|deadline|due|task|todo|note|follow.?up/)) {
        return 'reminder';
    }
    
    // Default category
    return 'work';
}

// Helper function to get event category from local storage
function getEventCategory(eventId) {
    try {
        const categories = JSON.parse(localStorage.getItem('eventCategories') || '{}');
        return categories[eventId];
    } catch (error) {
        return null;
    }
}

function populateDayEventsList(events) {
    const dayEventsList = document.getElementById('dayEventsList');
    const noDayEventsMessage = document.getElementById('noDayEventsMessage');
    
    if (events.length === 0) {
        dayEventsList.style.display = 'none';
        noDayEventsMessage.style.display = 'block';
    } else {
        dayEventsList.style.display = 'block';
        noDayEventsMessage.style.display = 'none';
        
        dayEventsList.innerHTML = events.map(event => {
            const eventDate = new Date(event.start);
            const endDate = new Date(event.end);
            
            let timeDisplay = '';
            if (!event.allDay) {
                timeDisplay = `${eventDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - ${endDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
            } else {
                timeDisplay = 'All day';
            }
            
            // Get event category for styling - use user-selected colors
            const eventType = categorizeEvent(event);
            const userColors = loadUserColors();
            const categoryColors = {
                work: { bg: userColors.work, text: 'Work' },
                meeting: { bg: userColors.meeting, text: 'Meeting' },
                personal: { bg: userColors.personal, text: 'Personal' },
                reminder: { bg: userColors.reminder, text: 'Reminder' }
            };
            const categoryStyle = categoryColors[eventType] || categoryColors.work;
            
            return `
                <div class="day-event-item" onclick="window.showEventDetails(${JSON.stringify(event).replace(/"/g, '&quot;')})">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="flex-grow-1">
                            <div class="d-flex align-items-center mb-2">
                                <h6 class="mb-0 me-2">${event.title}</h6>
                                <span class="badge text-white" style="background-color: ${categoryStyle.bg};">${categoryStyle.text}</span>
                            </div>
                            <div class="event-time">
                                <i class="bi bi-clock me-1"></i>${timeDisplay}
                            </div>
                            ${event.location ? `<div class="event-location"><i class="bi bi-geo-alt me-1"></i>${event.location}</div>` : ''}
                        </div>
                        <div class="text-end">
                            <span class="badge bg-dark">Google Calendar</span>
                        </div>
                    </div>
                    ${event.description ? `<div class="event-description mt-2">${event.description.substring(0, 150)}${event.description.length > 150 ? '...' : ''}</div>` : ''}
                </div>
            `;
        }).join('');
    }
}

function createEventForSelectedDay() {
    if (selectedDay && selectedMonth !== null && selectedYear) {
        // Close day details modal
        const dayModal = bootstrap.Modal.getInstance(document.getElementById('dayDetailsModal'));
        if (dayModal) dayModal.hide();
        
        // Set the date in the create event form
        const selectedDateString = new Date(selectedYear, selectedMonth, selectedDay).toISOString().split('T')[0];
        
        // Open create event modal
        const createModal = new bootstrap.Modal(document.getElementById('addEventModal'));
        createModal.show();
        
        // Pre-fill the date fields after modal is shown
        setTimeout(() => {
            const startDateField = document.getElementById('startDate');
            const endDateField = document.getElementById('endDate');
            if (startDateField) startDateField.value = selectedDateString;
            if (endDateField) endDateField.value = selectedDateString;
        }, 100);
    }
}

function showEventDetails(event) {
    // Close the day details modal if it's open
    const dayModal = bootstrap.Modal.getInstance(document.getElementById('dayDetailsModal'));
    if (dayModal) {
        dayModal.hide();
    }
    
    // Store the event for potential editing/deleting
    currentEventForEdit = event;
    window.currentEventForEdit = event; // Also store globally
    
    const modal = new bootstrap.Modal(document.getElementById('viewEventModal'));
    const content = document.getElementById('eventDetailsContent');
    
    const eventDate = new Date(event.start);
    const endDate = new Date(event.end);
    
    let timeDisplay = '';
    if (!event.allDay) {
        timeDisplay = `${eventDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})} - ${endDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
    } else {
        timeDisplay = window.LanguageManager ? window.LanguageManager.t('calendar.allDay') : 'All day';
    }
    
    const t = (key, fallback) => window.LanguageManager ? window.LanguageManager.t(key) : fallback;
    
    content.innerHTML = `
        <div class="row">
            <div class="col-12 mb-4">
                <h4 class="text-primary mb-3">${event.title}</h4>
                
                <div class="mb-3">
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-calendar3 me-2 text-muted"></i>
                        <strong>${t('calendar.date', 'Date')}:</strong>
                        <span class="ms-2">${eventDate.toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</span>
                    </div>
                    
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-clock me-2 text-muted"></i>
                        <strong>${t('calendar.time', 'Time')}:</strong>
                        <span class="ms-2">${timeDisplay}</span>
                    </div>
                    
                    ${event.location ? `
                        <div class="d-flex align-items-center mb-2">
                            <i class="bi bi-geo-alt me-2 text-muted"></i>
                            <strong>${t('calendar.location', 'Location')}:</strong>
                            <span class="ms-2">${event.location}</span>
                        </div>
                    ` : ''}
                    
                    <div class="d-flex align-items-center mb-2">
                        <i class="bi bi-tag me-2 text-muted"></i>
                        <strong>${t('calendar.source', 'Source')}:</strong>
                        <span class="badge bg-success ms-2">${t('calendar.googleCalendar', 'Google Calendar')}</span>
                    </div>
                </div>
                
                ${event.description ? `
                    <div class="mb-3">
                        <strong class="d-block mb-2">${t('calendar.description', 'Description')}:</strong>
                        <div class="p-3 bg-light rounded">${event.description}</div>
                    </div>
                ` : ''}
                
                <div class="mt-4 p-3 bg-light rounded">
                    <small class="text-muted">
                        <i class="bi bi-info-circle me-1"></i>
                        ${t('calendar.eventFromGoogle', 'This event is from your Google Calendar. You can edit or delete it using the buttons below.')}
                    </small>
                </div>
            </div>
        </div>
    `;
    
    modal.show();
}

// Make showEventDetails available globally immediately
window.showEventDetails = showEventDetails;

// Color Management System
const defaultColors = {
    work: '#5fb3d4',
    meeting: '#28a745', 
    personal: '#dc3545',
    reminder: '#ffc107'
};

// Local category storage for events (fallback if backend doesn't support categories)
function saveEventCategory(eventId, category) {
    const categories = JSON.parse(localStorage.getItem('eventCategories') || '{}');
    categories[eventId] = category;
    localStorage.setItem('eventCategories', JSON.stringify(categories));
}

function loadUserColors() {
    const saved = localStorage.getItem('calendarEventColors');
    if (saved) {
        try {
            return JSON.parse(saved);
        } catch (e) {
            console.warn('Failed to parse saved colors, using defaults');
        }
    }
    return { ...defaultColors };
}

function saveUserColors(colors) {
    localStorage.setItem('calendarEventColors', JSON.stringify(colors));
    applyColors(colors);
}

function applyColors(colors) {
    console.log('applyColors called with:', colors);
    
    // Create or update dynamic stylesheet
    let styleElement = document.getElementById('dynamicEventColors');
    if (!styleElement) {
        styleElement = document.createElement('style');
        styleElement.id = 'dynamicEventColors';
        document.head.appendChild(styleElement);
        console.log('Created new style element');
    } else {
        console.log('Using existing style element');
    }
    
    // Generate CSS with user colors
    const css = `
        .event-title.event-work {
            background: linear-gradient(135deg, ${colors.work}, ${darkenColor(colors.work, 20)}) !important;
            border-left-color: ${darkenColor(colors.work, 20)} !important;
        }
        .event-title.event-meeting {
            background: linear-gradient(135deg, ${colors.meeting}, ${darkenColor(colors.meeting, 20)}) !important;
            border-left-color: ${darkenColor(colors.meeting, 20)} !important;
        }
        .event-title.event-personal {
            background: linear-gradient(135deg, ${colors.personal}, ${darkenColor(colors.personal, 20)}) !important;
            border-left-color: ${darkenColor(colors.personal, 20)} !important;
        }
        .event-title.event-reminder {
            background: linear-gradient(135deg, ${colors.reminder}, ${darkenColor(colors.reminder, 20)}) !important;
            border-left-color: ${darkenColor(colors.reminder, 20)} !important;
        }
        .event-title.event-default {
            background: linear-gradient(135deg, #6c757d, ${darkenColor('#6c757d', 20)}) !important;
            border-left-color: ${darkenColor('#6c757d', 20)} !important;
        }
        
        /* Agenda view category colors */
        .agenda-event-category.agenda-category-work, .agenda-category-work {
            background: rgba(${hexToRgb(colors.work)}, 0.2) !important;
            color: ${colors.work} !important;
            border-color: rgba(${hexToRgb(colors.work)}, 0.3) !important;
        }
        
        .agenda-event-category.agenda-category-meeting, .agenda-category-meeting {
            background: rgba(${hexToRgb(colors.meeting)}, 0.2) !important;
            color: ${colors.meeting} !important;
            border-color: rgba(${hexToRgb(colors.meeting)}, 0.3) !important;
        }
        
        .agenda-event-category.agenda-category-personal, .agenda-category-personal {
            background: rgba(${hexToRgb(colors.personal)}, 0.2) !important;
            color: ${colors.personal} !important;
            border-color: rgba(${hexToRgb(colors.personal)}, 0.3) !important;
        }
        
        .agenda-event-category.agenda-category-reminder, .agenda-category-reminder {
            background: rgba(${hexToRgb(colors.reminder)}, 0.2) !important;
            color: ${colors.reminder} !important;
            border-color: rgba(${hexToRgb(colors.reminder)}, 0.3) !important;
        }
        
        .agenda-event-category.agenda-category-default, .agenda-category-default {
            background: rgba(108, 117, 125, 0.2) !important;
            color: #6c757d !important;
            border-color: rgba(108, 117, 125, 0.3) !important;
        }
        
        /* Agenda event left borders */
        .agenda-event-work {
            border-left-color: ${colors.work} !important;
        }
        
        .agenda-event-meeting {
            border-left-color: ${colors.meeting} !important;
        }
        
        .agenda-event-personal {
            border-left-color: ${colors.personal} !important;
        }
        
        .agenda-event-reminder {
            border-left-color: ${colors.reminder} !important;
        }
        
        .agenda-event-default {
            border-left-color: #6c757d !important;
        }
        
        /* Day view event colors (including all-day events) */
        .day-event.event-work, .all-day-event.event-work {
            background: linear-gradient(135deg, ${colors.work}, ${darkenColor(colors.work, 20)}) !important;
            border-left-color: ${darkenColor(colors.work, 20)} !important;
        }
        
        .day-event.event-meeting, .all-day-event.event-meeting {
            background: linear-gradient(135deg, ${colors.meeting}, ${darkenColor(colors.meeting, 20)}) !important;
            border-left-color: ${darkenColor(colors.meeting, 20)} !important;
        }
        
        .day-event.event-personal, .all-day-event.event-personal {
            background: linear-gradient(135deg, ${colors.personal}, ${darkenColor(colors.personal, 20)}) !important;
            border-left-color: ${darkenColor(colors.personal, 20)} !important;
        }
        
        .day-event.event-reminder, .all-day-event.event-reminder {
            background: linear-gradient(135deg, ${colors.reminder}, ${darkenColor(colors.reminder, 20)}) !important;
            border-left-color: ${darkenColor(colors.reminder, 20)} !important;
        }
        
        .day-event.event-default, .all-day-event.event-default {
            background: linear-gradient(135deg, #6c757d, ${darkenColor('#6c757d', 20)}) !important;
            border-left-color: ${darkenColor('#6c757d', 20)} !important;
        }
    `;
    
    styleElement.textContent = css;
    console.log('Applied CSS:', css);
    console.log('Style element content:', styleElement.textContent);
}

function darkenColor(color, percent) {
    // Convert hex to RGB
    const hex = color.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);
    
    // Darken by percentage
    const darkenedR = Math.max(0, Math.floor(r * (100 - percent) / 100));
    const darkenedG = Math.max(0, Math.floor(g * (100 - percent) / 100));
    const darkenedB = Math.max(0, Math.floor(b * (100 - percent) / 100));
    
    // Convert back to hex
    return `#${darkenedR.toString(16).padStart(2, '0')}${darkenedG.toString(16).padStart(2, '0')}${darkenedB.toString(16).padStart(2, '0')}`;
}

function hexToRgb(hex) {
    // Convert hex to RGB values
    const color = hex.replace('#', '');
    const r = parseInt(color.substr(0, 2), 16);
    const g = parseInt(color.substr(2, 2), 16);
    const b = parseInt(color.substr(4, 2), 16);
    
    return `${r}, ${g}, ${b}`;
}

function updatePreview(category, color) {
    const preview = document.getElementById(`${category}Preview`);
    if (preview) {
        const eventElement = preview.querySelector('.event-title');
        if (eventElement) {
            const darkerColor = darkenColor(color, 20);
            eventElement.style.background = `linear-gradient(135deg, ${color}, ${darkerColor})`;
            eventElement.style.borderLeftColor = darkerColor;
        }
    }
}

function initializeColorSettings() {
    const userColors = loadUserColors();
    
    // Set color picker values
    document.getElementById('workColorPicker').value = userColors.work;
    document.getElementById('meetingColorPicker').value = userColors.meeting;
    document.getElementById('personalColorPicker').value = userColors.personal;
    document.getElementById('reminderColorPicker').value = userColors.reminder;
    
    // Update previews
    updatePreview('work', userColors.work);
    updatePreview('meeting', userColors.meeting);
    updatePreview('personal', userColors.personal);
    updatePreview('reminder', userColors.reminder);
    
    // Apply colors to calendar
    applyColors(userColors);
    
    // Add event listeners to color pickers
    ['work', 'meeting', 'personal', 'reminder'].forEach(category => {
        const picker = document.getElementById(`${category}ColorPicker`);
        if (picker) {
            picker.addEventListener('input', function() {
                updatePreview(category, this.value);
            });
        }
    });
    
    // Save colors button
    document.getElementById('saveColorsBtn').addEventListener('click', function() {
        const colors = {
            work: document.getElementById('workColorPicker').value,
            meeting: document.getElementById('meetingColorPicker').value,
            personal: document.getElementById('personalColorPicker').value,
            reminder: document.getElementById('reminderColorPicker').value
        };
        
        saveUserColors(colors);
        
        // Show success message
        const modal = bootstrap.Modal.getInstance(document.getElementById('colorSettingsModal'));
        modal.hide();
        
        // Refresh calendar to show new colors
        if (window.loadGoogleCalendarEvents) {
            window.loadGoogleCalendarEvents();
        }
        
        // Refresh current view to apply new colors immediately
        if (currentViewMode === 'agenda') {
            generateAgendaView();
        } else if (currentViewMode === 'day') {
            generateDayView(currentDayView);
        }
        
        // Show notification
        if (window.showNotification) {
            window.showNotification('Event colors saved successfully!', 'success');
        }
    });
    
    // Reset colors button
    document.getElementById('resetColorsBtn').addEventListener('click', function() {
        // Reset to defaults
        document.getElementById('workColorPicker').value = defaultColors.work;
        document.getElementById('meetingColorPicker').value = defaultColors.meeting;
        document.getElementById('personalColorPicker').value = defaultColors.personal;
        document.getElementById('reminderColorPicker').value = defaultColors.reminder;
        
        // Update previews
        updatePreview('work', defaultColors.work);
        updatePreview('meeting', defaultColors.meeting);
        updatePreview('personal', defaultColors.personal);
        updatePreview('reminder', defaultColors.reminder);
    });
}

// Make functions globally available
window.createEventForSelectedDay = createEventForSelectedDay;
window.initializeColorSettings = initializeColorSettings;

// Global variables needed by the event handling functions
let currentEventForEdit = null;

// Make functions globally available for onclick handlers (outside DOMContentLoaded)
window.createEvent = function() {
    const form = document.getElementById('createEventForm');
    if (!form) {
        alert(window.LanguageManager ? window.LanguageManager.t('calendar.formNotFound') : 'Form not found!');
        return;
    }
    
    const formData = new FormData(form);
    
    const startDate = formData.get('startDate');
    const startTime = formData.get('startTime');
    const endDate = formData.get('endDate');
    const endTime = formData.get('endTime');
    const isAllDay = formData.get('allDay') === 'on';
    
    // Debug: Log the values to see what we're getting
    console.log('Form values:', {
        startDate,
        startTime,
        endDate,
        endTime,
        isAllDay
    });
    
    let start, end;
    
    // Validate required fields
    if (!startDate || startDate === 'null' || startDate === 'undefined') {
        alert(window.LanguageManager ? window.LanguageManager.t('calendar.startDateRequired') : 'Start date is required');
        return;
    }
    
    if (!isAllDay && (!startTime || startTime === 'null' || startTime === 'undefined')) {
        alert(window.LanguageManager ? window.LanguageManager.t('calendar.startTimeRequired') : 'Start time is required for timed events');
        return;
    }
    
    if (!isAllDay && (!endTime || endTime === 'null' || endTime === 'undefined')) {
        alert(window.LanguageManager ? window.LanguageManager.t('calendar.endTimeRequired') : 'End time is required for timed events');
        return;
    }
    
    try {
        // Convert date strings to proper format if needed
        function parseAndFormatDate(dateStr) {
            if (!dateStr) return null;
            
            // If already in YYYY-MM-DD format, return as is
            if (dateStr.match(/^\d{4}-\d{2}-\d{2}$/)) {
                return dateStr;
            }
            
            // Handle formats like "Thu, Aug 14, 2025"
            const tempDate = new Date(dateStr);
            if (isNaN(tempDate.getTime())) {
                throw new Error(`Cannot parse date: ${dateStr}`);
            }
            
            // Convert to YYYY-MM-DD format
            return tempDate.toISOString().split('T')[0];
        }
        
        const formattedStartDate = parseAndFormatDate(startDate);
        const formattedEndDate = parseAndFormatDate(endDate || startDate);
        
        console.log('Date parsing:', {
            originalStartDate: startDate,
            formattedStartDate: formattedStartDate,
            originalEndDate: endDate,
            formattedEndDate: formattedEndDate
        });
        
        if (isAllDay) {
            // For all-day events, ensure proper date parsing
            const startDateObj = new Date(formattedStartDate + 'T00:00:00');
            const endDateObj = new Date(formattedEndDate + 'T23:59:59');
            
            if (isNaN(startDateObj.getTime()) || isNaN(endDateObj.getTime())) {
                throw new Error('Invalid date');
            }
            
            start = startDateObj.toISOString().split('T')[0];
            end = endDateObj.toISOString().split('T')[0];
        } else {
            // For timed events, validate time format
            if (!startTime.match(/^\d{2}:\d{2}$/) || !endTime.match(/^\d{2}:\d{2}$/)) {
                throw new Error('Invalid time format');
            }
            
            const startDateTime = new Date(`${formattedStartDate}T${startTime}:00`);
            const endDateTime = new Date(`${formattedEndDate}T${endTime}:00`);
            
            if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {
                throw new Error('Invalid date/time');
            }
            
            // Ensure end time is after start time
            if (endDateTime <= startDateTime) {
                throw new Error('End time must be after start time');
            }
            
            start = startDateTime.toISOString();
            end = endDateTime.toISOString();
        }
    } catch (error) {
        console.error('Date validation error:', error);
        console.error('Values that caused error:', {
            startDate,
            startTime,
            endDate,
            endTime,
            isAllDay
        });
        alert(window.LanguageManager ? window.LanguageManager.t('calendar.invalidDateTime') : `Invalid date/time: ${error.message}. Please check your inputs.`);
        return;
    }
    
    // Recurring event fields
    const isRecurring = formData.get('recurring') === 'on';
    const recurringType = formData.get('recurringType');
    const recurringEnd = formData.get('recurringEnd');

    const eventData = {
        title: formData.get('title'),
        description: formData.get('description'),
        location: formData.get('location'),
        category: formData.get('category'),
        start: start,
        end: end,
        allDay: isAllDay,
        recurring: isRecurring,
        recurringType: isRecurring ? recurringType : null,
        recurringEnd: isRecurring ? recurringEnd : null
    };

    // Block event creation if title is empty
    if (!eventData.title || !eventData.title.trim()) {
        const titleInput = document.getElementById('title');
        if (titleInput) {
            titleInput.classList.add('is-invalid');
            titleInput.focus();
        }
        let msg = 'Event title is required.';
        if (window.LanguageManager) {
            const t = window.LanguageManager.t('calendar.eventTitleRequired');
            if (t && t !== 'calendar.eventTitleRequired') msg = t;
        }
        alert(msg);
        return;
    }

    // Show loading state
    const submitBtn = document.querySelector('#addEventModal .btn-primary');
    const originalText = submitBtn.textContent;
    submitBtn.disabled = true;
    submitBtn.innerHTML = `<span class="spinner-border spinner-border-sm me-2"></span>${window.LanguageManager ? window.LanguageManager.t('calendar.creating') : 'Creating...'}`;

    fetch('/calendar/create-event', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Save category locally as fallback
            if (data.event && data.event.id && eventData.category) {
                saveEventCategory(data.event.id, eventData.category);
            }
            
            // Hide modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('addEventModal'));
            if (modal) modal.hide();
            
            // Reset form
            form.reset();
            
            // Show success message - use existing showAlert function if available
            if (typeof window.showAlert === 'function') {
                window.showAlert(window.LanguageManager ? window.LanguageManager.t('calendar.eventCreatedSuccess') : 'Event created successfully!', 'success');
            } else {
                alert(window.LanguageManager ? window.LanguageManager.t('calendar.eventCreatedSuccess') : 'Event created successfully!');
            }
            
            // Reload events if function exists
            if (typeof window.loadGoogleCalendarEvents === 'function') {
                window.loadGoogleCalendarEvents();
            } else {
                location.reload();
            }
        } else {
            let errorMessage = (window.LanguageManager ? window.LanguageManager.t('calendar.eventCreationError') : 'Error creating event') + ': ' + data.error;
            
            // Check if it's a permission error
            if (data.error && (data.error.includes('permission') || data.error.includes('scope') || data.error.includes('forbidden'))) {
                const permissionMsg = window.LanguageManager ? window.LanguageManager.t('calendar.permissionError') : 'You may need to re-authorize with calendar write permissions.';
                const reauthorizeBtn = window.LanguageManager ? window.LanguageManager.t('calendar.reauthorizeNow') : 'Re-authorize Now';
                errorMessage += `<br><br>${permissionMsg} <button type="button" class="btn btn-warning btn-sm mt-2" onclick="window.reauthorizeCalendar()">${reauthorizeBtn}</button>`;
            }
            
            if (typeof window.showAlert === 'function') {
                window.showAlert(errorMessage, 'danger');
            } else {
                alert(errorMessage.replace(/<[^>]*>/g, ''));
            }
        }
    })
    .catch(error => {
        console.error('Error creating event:', error);
        if (typeof window.showAlert === 'function') {
            window.showAlert(window.LanguageManager ? window.LanguageManager.t('calendar.eventCreationError') + '. Please try again.' : 'Error creating event. Please try again.', 'danger');
        } else {
            alert(window.LanguageManager ? window.LanguageManager.t('calendar.eventCreationError') + '. Please try again.' : 'Error creating event. Please try again.');
        }
    })
    .finally(() => {
        // Reset button
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
    });
};

window.editEventFromView = function() {
    // This will be implemented to work with the global currentEventForEdit variable
    if (typeof window.currentEventForEdit === 'undefined' || !window.currentEventForEdit) {
        alert('No event selected for editing');
        return;
    }
    
    // Hide the view modal
    const viewModal = bootstrap.Modal.getInstance(document.getElementById('viewEventModal'));
    if (viewModal) viewModal.hide();
    
    // Populate edit form with current event data
    document.getElementById('editEventId').value = window.currentEventForEdit.id;
    document.getElementById('editTitle').value = window.currentEventForEdit.title;
    document.getElementById('editLocation').value = window.currentEventForEdit.location || '';
    document.getElementById('editDescription').value = window.currentEventForEdit.description || '';
    
    // Parse dates
    const startDate = new Date(window.currentEventForEdit.start);
    const endDate = new Date(window.currentEventForEdit.end);
    
    if (window.currentEventForEdit.allDay) {
        // For all-day events
        document.getElementById('editStartDate').value = window.currentEventForEdit.start;
        document.getElementById('editEndDate').value = window.currentEventForEdit.end;
        document.getElementById('editAllDay').checked = true;
        const timeFields = document.getElementById('editTimeFields');
        if (timeFields) timeFields.style.display = 'none';
    } else {
        // For timed events
        document.getElementById('editStartDate').value = startDate.toISOString().split('T')[0];
        document.getElementById('editEndDate').value = endDate.toISOString().split('T')[0];
        document.getElementById('editStartTime').value = startDate.toTimeString().slice(0, 5);
        document.getElementById('editEndTime').value = endDate.toTimeString().slice(0, 5);
        document.getElementById('editAllDay').checked = false;
        const timeFields = document.getElementById('editTimeFields');
        if (timeFields) timeFields.style.display = 'block';
    }
    
    // Set category if available, otherwise determine from event content
    const eventCategory = window.currentEventForEdit.category || categorizeEvent(window.currentEventForEdit);
    const categorySelect = document.getElementById('editCategory');
    if (categorySelect) {
        categorySelect.value = eventCategory;
    }
    
    // Show edit modal
    const editModal = new bootstrap.Modal(document.getElementById('editEventModal'));
    editModal.show();
};

window.deleteEventFromView = function() {
    if (typeof window.currentEventForEdit === 'undefined' || !window.currentEventForEdit) {
        alert('No event selected for deletion');
        return;
    }
    
    if (confirm('Are you sure you want to delete this event? This action cannot be undone.')) {
        // Show loading state
        const deleteBtn = document.querySelector('[onclick="deleteEventFromView()"]');
        let originalText = 'Delete Event';
        if (deleteBtn) {
            originalText = deleteBtn.innerHTML;
            deleteBtn.disabled = true;
            deleteBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Deleting...';
        }
        
        fetch(`/calendar/delete-event/${window.currentEventForEdit.id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Hide modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('viewEventModal'));
                if (modal) modal.hide();
                
                // Show success message
                if (typeof window.showAlert === 'function') {
                    window.showAlert('Event deleted successfully!', 'success');
                } else {
                    alert('Event deleted successfully!');
                }
                
                // Reload events
                if (typeof window.loadGoogleCalendarEvents === 'function') {
                    window.loadGoogleCalendarEvents();
                } else {
                    location.reload();
                }
            } else {
                if (typeof window.showAlert === 'function') {
                    window.showAlert('Error deleting event: ' + data.error, 'danger');
                } else {
                    alert('Error deleting event: ' + data.error);
                }
            }
        })
        .catch(error => {
            console.error('Error deleting event:', error);
            if (typeof window.showAlert === 'function') {
                window.showAlert('Error deleting event. Please try again.', 'danger');
            } else {
                alert('Error deleting event. Please try again.');
            }
        })
        .finally(() => {
            // Reset button
            if (deleteBtn) {
                deleteBtn.disabled = false;
                deleteBtn.innerHTML = originalText;
            }
        });
    }
};

window.updateEvent = function() {
    const form = document.getElementById('editEventForm');
    if (!form) {
        alert('Edit form not found!');
        return;
    }
    
    const formData = new FormData(form);
    
    const eventId = formData.get('eventId');
    const startDate = formData.get('startDate');
    const startTime = formData.get('startTime');
    const endDate = formData.get('endDate');
    const endTime = formData.get('endTime');
    const isAllDay = formData.get('allDay') === 'on';
    
    let start, end;
    
    if (isAllDay) {
        start = new Date(startDate).toISOString().split('T')[0];
        end = new Date(endDate || startDate).toISOString().split('T')[0];
    } else {
        start = new Date(`${startDate}T${startTime}`).toISOString();
        end = new Date(`${endDate || startDate}T${endTime}`).toISOString();
    }
    
    const eventData = {
        title: formData.get('title'),
        description: formData.get('description'),
        location: formData.get('location'),
        category: formData.get('category'),
        start: start,
        end: end,
        allDay: isAllDay
    };
    
    // Show loading state
    const submitBtn = document.querySelector('#editEventModal .btn-warning');
    if (submitBtn) {
        const originalText = submitBtn.textContent;
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Updating...';
    }
    
    fetch(`/calendar/update-event/${eventId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(eventData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Save category locally as fallback
            if (eventId && eventData.category) {
                saveEventCategory(eventId, eventData.category);
            }
            
            // Hide modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('editEventModal'));
            if (modal) modal.hide();
            
            // Reset form
            form.reset();
            
            // Show success message
            if (typeof window.showAlert === 'function') {
                window.showAlert('Event updated successfully!', 'success');
            } else {
                alert('Event updated successfully!');
            }
            
            // Reload events
            if (typeof window.loadGoogleCalendarEvents === 'function') {
                window.loadGoogleCalendarEvents();
            } else {
                location.reload();
            }
        } else {
            if (typeof window.showAlert === 'function') {
                window.showAlert('Error updating event: ' + data.error, 'danger');
            } else {
                alert('Error updating event: ' + data.error);
            }
        }
    })
    .catch(error => {
        console.error('Error updating event:', error);
        if (typeof window.showAlert === 'function') {
            window.showAlert('Error updating event. Please try again.', 'danger');
        } else {
            alert('Error updating event. Please try again.');
        }
    })
    .finally(() => {
        // Reset button
        if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.textContent = 'Update Event';
        }
    });
};

window.reauthorizeCalendar = function() {
    // Redirect to public site Google OAuth to get updated permissions
    window.location.href = 'http://localhost:3000/auth/google';
};

// Make createEventForSelectedDay globally available
window.createEventForSelectedDay = createEventForSelectedDay;

// ===== SIMPLE DATE AND TIME PICKER FUNCTIONALITY =====

// Initialize simple pickers
document.addEventListener('DOMContentLoaded', function() {
    // initializeSimplePickers(); // Commented out - using external picker components
    
    // Keep only the essential calendar initialization
    initializeCalendar();
});

function initializeSimplePickers() {
    console.log('🎯 Initializing simple date and time pickers...');
    
    // Initialize time picker options
    initializeSimpleTimePickers();
    
    // Initialize date picker functionality
    initializeSimpleDatePickers();
    
    // Initialize all-day toggle functionality
    initializeAllDayToggle();
    
    console.log('✅ Simple pickers initialized successfully');
}

// Initialize time picker dropdowns with 30-minute intervals
function initializeSimpleTimePickers() {
    const timePickers = document.querySelectorAll('.simple-timepicker');
    
    timePickers.forEach(picker => {
        // Clear existing options except the first one
        while (picker.children.length > 1) {
            picker.removeChild(picker.lastChild);
        }
        
        // Generate time options (30-minute intervals)
        for (let hours = 0; hours < 24; hours++) {
            for (let minutes = 0; minutes < 60; minutes += 30) {
                const timeValue = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
                const displayTime = formatTimeDisplay(hours, minutes);
                
                const option = document.createElement('option');
                option.value = timeValue;
                option.textContent = displayTime;
                picker.appendChild(option);
            }
        }
    });
}

// Format time for display (12-hour format with AM/PM)
function formatTimeDisplay(hours, minutes) {
    const period = hours >= 12 ? 'PM' : 'AM';
    const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;
    const displayMinutes = minutes.toString().padStart(2, '0');
    return `${displayHours}:${displayMinutes} ${period}`;
}

// Initialize simple date picker functionality
function initializeSimpleDatePickers() {
    let currentTarget = null;
    let pickerDate = new Date();
    let startDate = null;
    let endDate = null;
    let selectingStart = true; // Track what we're selecting
    
    // Handle date input clicks
    document.querySelectorAll('.simple-datepicker').forEach(input => {
        input.addEventListener('click', function() {
            currentTarget = this;
            startDate = null;
            endDate = null;
            selectingStart = true;
            
            // Clear any existing selection
            document.querySelectorAll('.calendar-day.selected').forEach(cell => {
                cell.classList.remove('selected');
            });
            document.querySelectorAll('.calendar-day.range-start').forEach(cell => {
                cell.classList.remove('range-start');
            });
            document.querySelectorAll('.calendar-day.range-end').forEach(cell => {
                cell.classList.remove('range-end');
            });
            document.querySelectorAll('.calendar-day.in-range').forEach(cell => {
                cell.classList.remove('in-range');
            });
            
            pickerDate = new Date();
            updateSimpleCalendar();
            const modal = new bootstrap.Modal(document.getElementById('simpleDatePickerModal'));
            modal.show();
            
            // Update modal title and status
            // Static label; no dynamic instructions
        });
    });
    
    // Navigation buttons
    document.getElementById('simplePrevMonth').addEventListener('click', function() {
        pickerDate.setMonth(pickerDate.getMonth() - 1);
        updateSimpleCalendar();
    });
    
    document.getElementById('simpleNextMonth').addEventListener('click', function() {
        pickerDate.setMonth(pickerDate.getMonth() + 1);
        updateSimpleCalendar();
    });
    
    // Confirm date selection
    document.getElementById('confirmDateBtn').addEventListener('click', function() {
        if (currentTarget && startDate && endDate) {
            // Update the visible input
            const startStr = formatDateForInput(startDate);
            const endStr = formatDateForInput(endDate);
            
            if (startDate.toDateString() === endDate.toDateString()) {
                currentTarget.value = startStr;
            } else {
                currentTarget.value = `${startStr} → ${endStr}`;
            }
            
            // Update hidden inputs based on which picker was used
            if (currentTarget.id === 'dateRange') {
                document.getElementById('startDate').value = formatDateForInput(startDate);
                document.getElementById('endDate').value = formatDateForInput(endDate);
            } else if (currentTarget.id === 'editDateRange') {
                document.getElementById('editStartDate').value = formatDateForInput(startDate);
                document.getElementById('editEndDate').value = formatDateForInput(endDate);
            }
        }
    });
    
    function updateSimpleCalendar() {
        // Update month/year display
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June',
                           'July', 'August', 'September', 'October', 'November', 'December'];
        document.getElementById('simpleMonthYear').textContent = 
            `${monthNames[pickerDate.getMonth()]} ${pickerDate.getFullYear()}`;
        
        // Generate calendar days
        const daysContainer = document.getElementById('simpleDays');
        daysContainer.innerHTML = '';
        
        const firstDay = new Date(pickerDate.getFullYear(), pickerDate.getMonth(), 1);
        const lastDay = new Date(pickerDate.getFullYear(), pickerDate.getMonth() + 1, 0);
        const startOfCalendar = new Date(firstDay);
        startOfCalendar.setDate(startOfCalendar.getDate() - firstDay.getDay());
        
        const today = new Date();
        
        for (let week = 0; week < 6; week++) {
            const weekRow = document.createElement('div');
            weekRow.className = 'calendar-week';
            
            for (let day = 0; day < 7; day++) {
                const currentDate = new Date(startOfCalendar);
                currentDate.setDate(startOfCalendar.getDate() + (week * 7) + day);
                
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day';
                dayCell.textContent = currentDate.getDate();
                
                // Add classes for styling
                if (currentDate.getMonth() !== pickerDate.getMonth()) {
                    dayCell.classList.add('other-month');
                }
                if (currentDate.toDateString() === today.toDateString()) {
                    dayCell.classList.add('today');
                }
                
                // Handle date range selection
                if (startDate && endDate) {
                    if (currentDate.toDateString() === startDate.toDateString()) {
                        dayCell.classList.add('range-start');
                    }
                    if (currentDate.toDateString() === endDate.toDateString()) {
                        dayCell.classList.add('range-end');
                    }
                    if (currentDate > startDate && currentDate < endDate) {
                        dayCell.classList.add('in-range');
                    }
                } else if (startDate && currentDate.toDateString() === startDate.toDateString()) {
                    dayCell.classList.add('selected');
                }
                
                // Click handler for range selection
                dayCell.addEventListener('click', function() {
                    const clickedDate = new Date(currentDate);
                    
                    if (selectingStart) {
                        startDate = clickedDate;
                        endDate = null;
                        selectingStart = false;
                    } else {
                        if (clickedDate < startDate) {
                            endDate = startDate;
                            startDate = clickedDate;
                        } else {
                            endDate = clickedDate;
                        }
                        selectingStart = true;
                    }
                    
                    updateSimpleCalendar(); // Refresh the calendar display
                });
                
                weekRow.appendChild(dayCell);
            }
            
            daysContainer.appendChild(weekRow);
        }
    }
}

// (Quick date helper functions removed for ultra-simple picker)

function formatDateForInput(date) {
    const options = { 
        weekday: 'short', 
        month: 'short', 
        day: 'numeric', 
        year: 'numeric' 
    };
    return date.toLocaleDateString('en-US', options);
}

// Initialize all-day toggle functionality
function initializeAllDayToggle() {
    // Handle all-day checkbox for create modal
    const allDayCheckbox = document.getElementById('allDay');
    if (allDayCheckbox) {
        allDayCheckbox.addEventListener('change', function() {
            const timeFields = document.getElementById('timeFields');
            if (timeFields) {
                timeFields.style.display = this.checked ? 'none' : 'block';
            }
        });
    }
    
    // Handle all-day checkbox for edit modal
    const editAllDayCheckbox = document.getElementById('editAllDay');
    if (editAllDayCheckbox) {
        editAllDayCheckbox.addEventListener('change', function() {
            const editTimeFields = document.getElementById('editTimeFields');
            if (editTimeFields) {
                editTimeFields.style.display = this.checked ? 'none' : 'block';
            }
        });
    }
}

// Make functions globally available
window.initializeSimplePickers = initializeSimplePickers;

// ===== CIRCULAR TIME PICKER FUNCTIONS =====

// Initialize time picker state
window.currentTimePicker = {
    targetElement: null,
    displayElement: null,
    hours: 12,
    minutes: 0,
    mode: 'hours' // 'hours' or 'minutes'
};

// Open time picker
function openTimePicker(targetId) {
    window.currentTimePicker.targetElement = document.getElementById(targetId);
    window.currentTimePicker.displayElement = document.getElementById(targetId + 'Display');
    
    // Get current value if any
    const currentValue = window.currentTimePicker.targetElement.value;
    if (currentValue) {
        const [hours, minutes] = currentValue.split(':');
        window.currentTimePicker.hours = parseInt(hours);
        window.currentTimePicker.minutes = parseInt(minutes);
    } else {
        // Default to current time
        const now = new Date();
        window.currentTimePicker.hours = now.getHours();
        window.currentTimePicker.minutes = Math.round(now.getMinutes() / 5) * 5;
    }
    
    // Always start with hours mode
    setTimeMode('hours');
    updateTimeDisplay();
    
    document.getElementById('circularTimePicker').classList.add('show');
}

// Close time picker
function closeTimePicker() {
    document.getElementById('circularTimePicker').classList.remove('show');
}

// Set time mode (hours or minutes)
function setTimeMode(mode) {
    window.currentTimePicker.mode = mode;
    
    // Update button states
    document.getElementById('hourModeBtn').classList.toggle('active', mode === 'hours');
    document.getElementById('minuteModeBtn').classList.toggle('active', mode === 'minutes');
    
    // Update instructions
    const instructions = document.getElementById('modeInstructions');
    
    // Generate appropriate numbers
    generateClockNumbers(mode);
    
    if (mode === 'hours') {
        instructions.textContent = 'Inner circle: 13-24, Outer circle: 1-12';
    } else {
        instructions.textContent = 'Select minutes (5-minute intervals)';
    }
}

// Generate clock numbers dynamically
function generateClockNumbers(mode) {
    const container = document.getElementById('clockNumbers');
    container.innerHTML = '';
    
    if (mode === 'hours') {
        // Generate inner circle (13-24) - closer to center
        for (let i = 13; i <= 24; i++) {
            const angle = (i - 13) * 30; // Start from 13 (like 1 o'clock position)
            const radius = 70; // Inner circle radius - more spaced from center
            
            const x = Math.sin(angle * Math.PI / 180) * radius;
            const y = -Math.cos(angle * Math.PI / 180) * radius;
            
            const number = document.createElement('div');
            number.className = 'clock-number inner-circle';
            number.textContent = i === 24 ? '00' : i;
            number.setAttribute('data-value', i === 24 ? 0 : i);
            number.style.left = `calc(50% + ${x}px - 22px)`;
            number.style.top = `calc(50% + ${y}px - 22px)`;
            
            // Highlight current selection
            const hourValue = i === 24 ? 0 : i;
            if (hourValue === window.currentTimePicker.hours) {
                number.classList.add('selected');
            }
            
            container.appendChild(number);
        }
        
        // Generate outer circle (1-12) - on the edge
        for (let i = 1; i <= 12; i++) {
            const angle = (i - 1) * 30; // 360/12 = 30 degrees each
            const radius = 130; // Outer circle radius - further out
            
            const x = Math.sin(angle * Math.PI / 180) * radius;
            const y = -Math.cos(angle * Math.PI / 180) * radius;
            
            const number = document.createElement('div');
            number.className = 'clock-number outer-circle';
            number.textContent = i;
            number.setAttribute('data-value', i);
            number.style.left = `calc(50% + ${x}px - 22px)`;
            number.style.top = `calc(50% + ${y}px - 22px)`;
            
            // Highlight current selection
            if (i === window.currentTimePicker.hours) {
                number.classList.add('selected');
            }
            
            container.appendChild(number);
        }
    } else {
        // Generate minutes (0, 5, 10, 15, ..., 55) in middle circle
        for (let i = 0; i < 12; i++) {
            const minute = i * 5;
            const angle = i * 30; // 360/12 = 30 degrees each
            const radius = 105; // Middle radius for minutes
            
            const x = Math.sin(angle * Math.PI / 180) * radius;
            const y = -Math.cos(angle * Math.PI / 180) * radius;
            
            const number = document.createElement('div');
            number.className = 'clock-number minute-circle';
            number.textContent = minute.toString().padStart(2, '0');
            number.setAttribute('data-value', minute);
            number.style.left = `calc(50% + ${x}px - 22px)`;
            number.style.top = `calc(50% + ${y}px - 22px)`;
            
            // Highlight current selection
            if (minute === window.currentTimePicker.minutes) {
                number.classList.add('selected');
            }
            
            container.appendChild(number);
        }
    }
}

// Clear time
function clearTime() {
    window.currentTimePicker.targetElement.value = '';
    window.currentTimePicker.displayElement.textContent = 'Select time...';
    closeTimePicker();
}

// Confirm time selection
function confirmTime() {
    const timeString = formatTime24(window.currentTimePicker.hours, window.currentTimePicker.minutes);
    const displayTimeString = formatTimeDisplay(window.currentTimePicker.hours, window.currentTimePicker.minutes);
    
    window.currentTimePicker.targetElement.value = timeString;
    window.currentTimePicker.displayElement.textContent = displayTimeString;
    
    closeTimePicker();
}

// Update time display
function updateTimeDisplay() {
    const displayTimeString = formatTimeDisplay(window.currentTimePicker.hours, window.currentTimePicker.minutes);
    document.getElementById('timeDisplay').textContent = displayTimeString;
}

// Format time for display (24-hour format)
function formatTimeDisplay(hours, minutes) {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
}

// Format time for input (24-hour format)
function formatTime24(hours, minutes) {
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
}

// Initialize clock interactions
document.addEventListener('DOMContentLoaded', function() {
    // Handle number clicks
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('clock-number')) {
            const value = parseInt(e.target.getAttribute('data-value'));
            
            if (window.currentTimePicker.mode === 'hours') {
                window.currentTimePicker.hours = value;
                updateTimeDisplay();
                
                // Update visual selection
                document.querySelectorAll('.clock-number').forEach(num => {
                    num.classList.remove('selected');
                });
                e.target.classList.add('selected');
                
                // Auto-switch to minutes after 0.8 seconds
                setTimeout(() => {
                    setTimeMode('minutes');
                }, 800);
                
            } else if (window.currentTimePicker.mode === 'minutes') {
                window.currentTimePicker.minutes = value;
                updateTimeDisplay();
                
                // Update visual selection
                document.querySelectorAll('.clock-number').forEach(num => {
                    num.classList.remove('selected');
                });
                e.target.classList.add('selected');
            }
        }
    });
    
    // Close on overlay click
    document.getElementById('circularTimePicker').addEventListener('click', function(e) {
        if (e.target === this) {
            closeTimePicker();
        }
    });
});

// Make time picker functions globally available
window.openTimePicker = openTimePicker;
window.closeTimePicker = closeTimePicker;
window.setTimeMode = setTimeMode;
window.clearTime = clearTime;
window.confirmTime = confirmTime;

</script>